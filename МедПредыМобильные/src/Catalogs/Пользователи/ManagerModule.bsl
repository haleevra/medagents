Процедура ОбновитьСписокПользователейССервера(СообщениеОбОшибке = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СоединениеСЦБУстановлено = ОбщегоНазначенияВызовСервера.ПолучитьЗначениеКонстанты("СоединениеСЦБУстановлено");
	Если НЕ СоединениеСЦБУстановлено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Прокси = ОбменМобильноеПриложениеПовторноеИспользование.ПолучитьПрокси();
	Если Прокси = Неопределено Тогда
		СообщениеОбОшибке = НСтр("ru='Что-то пошло не так. Проверьте настройки подключения к интернету и попробуйте позже.'");
		Возврат;
	КонецЕсли;
	
	Попытка
		ДанныеОтвета = Прокси.ПолучитьСписокПользователей();
	Исключение
		СообщениеОбОшибке = НСтр("ru='Для управления пользователями необходимо обновить серверную информационную базу. Минимально необходимая версия - 1.6.5.15.';en='You need to update the back-end database. The minimum required version is 1.6.5.15.'");
		Возврат;
	КонецПопытки;
	МассивПользователей = СериализаторXDTO.ПрочитатьXDTO(ДанныеОтвета);
	
	// Обновление списка пользователей из загруженного.
	Для каждого ТекЭлемент Из МассивПользователей Цикл
		
		Пользователь = Справочники.Пользователи.НайтиПоРеквизиту(
			"ИдентификаторПользователяИБ",
			ТекЭлемент.ИдентификаторПользователяИБ
		);
		Если ЗначениеЗаполнено(Пользователь) Тогда
			ПользовательОбъект = Пользователь.ПолучитьОбъект();
		Иначе
			ПользовательОбъект = Справочники.Пользователи.СоздатьЭлемент();
		Конецесли;
		
		НужноЗаписать = Ложь;
		Если ПользовательОбъект.Наименование <> ТекЭлемент.Наименование Тогда
			ПользовательОбъект.Наименование = ТекЭлемент.Наименование;
			НужноЗаписать = Истина;
		КонецЕсли;
		
		Если ПользовательОбъект.ВходВПрограммуРазрешен <> ТекЭлемент.ВходВПрограммуРазрешен Тогда
			ПользовательОбъект.ВходВПрограммуРазрешен = ТекЭлемент.ВходВПрограммуРазрешен;
			НужноЗаписать = Истина;
		КонецЕсли;

		Если ПользовательОбъект.Недействителен <> ТекЭлемент.Недействителен Тогда
			ПользовательОбъект.Недействителен = ТекЭлемент.Недействителен;
			НужноЗаписать = Истина;
		КонецЕсли;
		
		Если ПользовательОбъект.ИдентификаторПользователяИБ <> ТекЭлемент.ИдентификаторПользователяИБ Тогда
			ПользовательОбъект.ИдентификаторПользователяИБ = ТекЭлемент.ИдентификаторПользователяИБ;
			НужноЗаписать = Истина;
		КонецЕсли;
		
		Если ПользовательОбъект.Профиль <> ТекЭлемент.Профиль Тогда
			Если ЗначениеЗаполнено(ТекЭлемент.Профиль) Тогда
				ПользовательОбъект.Профиль = Перечисления.ПрофилиМобильногоПриложения[ТекЭлемент.Профиль];
			Иначе
				ПользовательОбъект.Профиль = Перечисления.ПрофилиМобильногоПриложения.МедПредставитель;
			КонецЕсли;
			НужноЗаписать = Истина;
		КонецЕсли;
		
		Если НужноЗаписать Тогда
			ПользовательОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
	// Удаление отсутствующих в загруженном списке пользователей.
	ВыборкаПользователей = Справочники.Пользователи.Выбрать();
	Пока ВыборкаПользователей.Следующий() Цикл
		ПользовательНайден = Ложь;
		Для каждого ТекЭлемент Из МассивПользователей Цикл
			Если ВыборкаПользователей.ИдентификаторПользователяИБ = ТекЭлемент.ИдентификаторПользователяИБ Тогда
				ПользовательНайден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ПользовательНайден
			ИЛИ НЕ ЗначениеЗаполнено(ВыборкаПользователей.ИдентификаторПользователяИБ) Тогда
			ПользовательОбъект = ВыборкаПользователей.ПолучитьОбъект();
			ПользовательОбъект.Удалить();
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры