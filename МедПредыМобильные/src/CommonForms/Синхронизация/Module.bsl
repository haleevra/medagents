&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем НачалоОбмена;

&НаСервере
Перем Прокси;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ПоказатьВыборБазы") Тогда
		ПоказатьВыборБазы = Параметры.ПоказатьВыборБазы;
	КонецЕсли;
	
	ЗаполнитьАвторизацию();
	
	Если АвторизацияПройдена Тогда
		ПерейтиНаСтраницуСоединения();
	Иначе
		ПерейтиНаСтраницуАвторизации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Проверяем готовность к обмену.
	Если НЕ ПоказатьВыборБазы 
		И НЕ ОбменМобильноеПриложениеВызовСервера.ЕстьНастройкиОбмена() Тогда
		ЭтапОбмена = Новый СписокЗначений;
		ЭтапОбмена.Добавить(КодВозвратаДиалога.ОК, НСтр("ru='Заполнить';en='Fill'"));
		ЭтапОбмена.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отменить';en='Cancel'"));
		ТекстВопроса = НСтр("ru='Не заполнены настройки синхронизации с информационной базой."
		"Заполнить настройки?';en='Not filled with database sync settings."
		"Fill in the settings?'");
		ТекстЗаголовка = НСтр("ru='Синхронизация данных';en='Data Synchronization'");
		Ответ = Вопрос(ТекстВопроса, ЭтапОбмена, 0,, ТекстЗаголовка);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
			Возврат;
		Иначе
			ОткрытьФормуМодально("ОбщаяФорма.НастройкиСинхронизации", Новый Структура("ВызовИзФормыОбмена", Истина));
			Если НЕ ОбменМобильноеПриложениеВызовСервера.ОбменВключен()
				ИЛИ НЕ ОбменМобильноеПриложениеВызовСервера.ЕстьНастройкиОбмена() Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		ЗаполнитьАвторизацию();
	Конецесли;
	
	Если Элементы.ОбменДанными.ТекущаяСтраница = Элементы.СинхронизацияДанных Тогда
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
		ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ПриЗакрытииСервер();
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	Если ОбменЗавершен Тогда
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеОбмена");
	КонецЕсли;
	
	Оповестить("ПрошелОбмен");
	
КонецПроцедуры

#КонецОбласти

#Область ДействияКомандныхПанелейФормы

&НаКлиенте
Процедура Синхронизировать(Команда)
	
	ИдентификаторЗадания = Неопределено;
	НачалоОбмена = Неопределено;
	
	СинхронизироватьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПароль(Команда)
	
	НачалоОбмена = Неопределено;
	
	УстановитьПараметрыАвторизации();
	
	ПерейтиНаСтраницуСоединения();
	
	ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбмен(Команда)
	
	ВыполнениеОбменаДанными();
	
КонецПроцедуры

&НаКлиенте
Процедура Отменить(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначенияя

/////////////////////////////////////////////////////
// ОБЩИЕ

&НаКлиенте
Процедура ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания) Экспорт
	
	ПараметрыОбработчикаОжидания = Новый Структура(
	"МинимальныйИнтервал,МаксимальныйИнтервал,ТекущийИнтервал,КоэффициентУвеличенияИнтервала", 0.5, 5, 1, 1.4);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтраниц(ЭтапОбмена)
	
	Если ЭтапОбмена = 0 Тогда
		Элементы.Авторизация.Видимость			= Истина;
		Элементы.СинхронизацияДанных.Видимость	= Ложь;
		Элементы.ГруппаУстановкаСоединения.Видимость	= Истина;
		Элементы.ГруппаСинхронизация.Видимость	= Ложь;
		Элементы.ОбменДанными.ТекущаяСтраница	= Элементы.Авторизация;
		Элементы.КнопкаОК.Видимость		= Истина;
		Элементы.КнопкаОК.Заголовок		= НСтр("ru='Продолжить';en='Continue'");
		Элементы.КнопкаОК.ИмяКоманды	= "ВвестиПароль";
		
	ИначеЕсли ЭтапОбмена = 1 Тогда
		Элементы.Авторизация.Видимость			= Ложь;
		Элементы.СинхронизацияДанных.Видимость	= Истина;
		Элементы.ГруппаУстановкаСоединения.Видимость	= Истина;
		Элементы.ГруппаСинхронизация.Видимость	= Ложь;
		Элементы.ОбменДанными.ТекущаяСтраница	= Элементы.СинхронизацияДанных;
		
		Элементы.КнопкаОК.Видимость		= Ложь;
		Элементы.КнопкаОК.Заголовок		= НСтр("ru='Соединиться';en='Connect'");
		Элементы.КнопкаОК.ИмяКоманды	= "Синхронизировать";
		
	ИначеЕсли ЭтапОбмена = 2 Тогда
		Элементы.Авторизация.Видимость			= Ложь;
		Элементы.СинхронизацияДанных.Видимость	= Истина;
		Элементы.ГруппаУстановкаСоединения.Видимость	= Ложь;
		Элементы.ГруппаСинхронизация.Видимость	= Истина;
		Элементы.ОбменДанными.ТекущаяСтраница	= Элементы.СинхронизацияДанных;
		
		Элементы.КнопкаОК.Видимость		= Истина;
		Элементы.КнопкаОК.Заголовок		= НСтр("ru='Синхронизировать';en='Synchronize'");
		Элементы.КнопкаОК.ИмяКоманды	= "Синхронизировать";
		
	ИначеЕсли ЭтапОбмена = 3 Тогда
		Элементы.Авторизация.Видимость			= Ложь;
		Элементы.СинхронизацияДанных.Видимость	= Истина;
		Элементы.ГруппаУстановкаСоединения.Видимость	= Ложь;
		Элементы.ГруппаСинхронизация.Видимость	= Истина;
		Элементы.ОбменДанными.ТекущаяСтраница	= Элементы.СинхронизацияДанных;
		
		Элементы.КнопкаОК.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииСервер()
	
	Прокси = "";
	
КонецПроцедуры

///////////////////////////////////////
// АВТОРИЗАЦИЯ

&НаСервере
Процедура ЗаполнитьАвторизацию()
	
	АвторизацияПройдена = Ложь;
	
	НаборКонстант = Константы.СоздатьНабор("ПользовательЦентральнойБазы, Пароль");
	НаборКонстант.Прочитать();
	
	Пользователь	= НаборКонстант.ПользовательЦентральнойБазы;
	Пароль	= НаборКонстант.Пароль;
	
	Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
		Возврат;
	КонецЕсли;
	
	АвторизацияПройдена = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПерейтиНаСтраницуАвторизации(Ошибка = Ложь)
	
	УстановитьВидимостьСтраниц(0);
	Заголовок = НСтр("ru='Авторизация';en='Authorization'");
	Если Ошибка Тогда
		Заголовок = НСтр("en='Specify the Connection Settings';ru='Уточните параметры подключения'");
	КонецЕсли;
	НаборКонстант = Константы.СоздатьНабор("ПользовательЦентральнойБазы, Пароль");
	НаборКонстант.Прочитать();
	
	Пользователь = НаборКонстант.ПользовательЦентральнойБазы;
	Пароль = НаборКонстант.Пароль;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыАвторизации()
	
	НаборКонстант = Константы.СоздатьНабор("ПользовательЦентральнойБазы, Пароль");
	
	НаборКонстант.ПользовательЦентральнойБазы = Пользователь;
	НаборКонстант.Пароль = Пароль;
	
	НаборКонстант.Записать();
	
	АвторизацияПройдена = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОшибкуАвторизации()
	
	АвторизацияПройдена = Ложь;
	
	Элементы.Декорация7.Заголовок = НСтр("en='Authorization Error."
	"Specify the user name and password.';ru='Ошибка авторизации."
	"Уточните имя пользователя и пароль.'");
	
	ПерейтиНаСтраницуАвторизации(Истина);
	
КонецПроцедуры

///////////////////////////////////////
// СОЕДИНЕНИЕ

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Если ОбщегоНазначенияВызовСервера.ПолучитьЗначениеКонстанты("ОбменВыполняется") Тогда
	ИначеЕсли НачалоОбмена = Неопределено Тогда
		Если ПоказатьВыборБазы Тогда
			Результат = ОткрытьФормуМодально("ОбщаяФорма.ВыборЦентральнойБазы");
			Если Результат = Неопределено Тогда
				Закрыть();
				Возврат;
			ИначеЕсли Результат = "1" Тогда
				ОбработатьОшибкуАвторизации();
				Возврат;
			ИначеЕсли Результат = "2" Тогда
				ОбработатьОшибкуСоединения(НСтр("ru='Сервис недоступен. Попробуйте, пожалуйста, позже.';en='Connection error.'"));
				НачалоОбмена = Неопределено;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		НачалоОбмена = НачатьОбменДанными();
	Иначе
		Если НачалоОбмена.ОбменРазрешен Тогда
			ОбработатьСоединениеУстановлено(1);
			ВыполнениеОбменаДанными();
		Иначе
			ОбработатьОшибкуСоединения(НачалоОбмена.СообщениеОбОшибке);
			НачалоОбмена = Неопределено;
		Конецесли;
		
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал * ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания(
		"Подключаемый_ПроверитьВыполнениеЗадания",
		ПараметрыОбработчикаОжидания.ТекущийИнтервал,
		Истина
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОшибкуСоединения(СообщениеОбОшибке)
	
	Если Найти(СообщениеОбОшибке, "Аутентификация")>0 Тогда
		ОбработатьОшибкуАвторизации();
	Иначе
		ОбработатьСоединениеУстановлено(2, СообщениеОбОшибке);
	КонецЕсли;
	
КОнецПроцедуры

&НаСервере
Процедура ПерейтиНаСтраницуСоединения()
	
	УстановитьВидимостьСтраниц(1);
	Заголовок = НСтр("ru = 'Синхронизация данных'");
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСоединениеУстановлено(ЭтапОбмена, СообщениеОбОшибке = "")
	
	Если ЭтапОбмена = 0 Тогда
		Элементы.ГруппаУстанавливается.Видимость	= Истина;
		Элементы.ГруппаУстанавлено.Видимость		= Ложь;
		Элементы.ГруппаНеУстанавлено.Видимость		= Ложь;
	ИначеЕсли ЭтапОбмена = 1 Тогда
		Элементы.ГруппаУстанавливается.Видимость	= Ложь;
		Элементы.ГруппаУстанавлено.Видимость		= Истина;
		Элементы.ГруппаНеУстанавлено.Видимость		= Ложь;
	ИначеЕсли ЭтапОбмена = 2 Тогда
		Если ПустаяСтрока(СообщениеОбОшибке) Тогда
			Элементы.Декорация17.Заголовок = НСтр("ru='Соединение не установлено."
			"Проверьте настройки синхронизации.';en='The connection is not established.'");
		Иначе
			Элементы.Декорация17.Заголовок = СообщениеОбОшибке;
		КонецЕсли;
		
		Элементы.ГруппаУстанавливается.Видимость	= Ложь;
		Элементы.ГруппаУстанавлено.Видимость		= Ложь;
		Элементы.ГруппаНеУстанавлено.Видимость		= Истина;
		Элементы.КнопкаОК.Видимость = Истина;
	Иначе
		Элементы.ГруппаУстанавливается.Видимость	= Ложь;
		Элементы.ГруппаУстанавлено.Видимость		= Ложь;
		Элементы.ГруппаНеУстанавлено.Видимость		= Истина;
	КонецЕсли;
	
	Элементы.ГруппаСинхронизация.Видимость          = Ложь;
	
КонецПроцедуры

/////////////////////////////////////////////////////
// ОБМЕН

&НаСервере
Функция НачатьОбменДанными()
	
	УстановитьПривилегированныйРежим(Истина);
	ОбновитьПовторноИспользуемыеЗначения();
	
	СтруктураОтвета = Новый Структура("ОбменРазрешен, СообщениеОбОшибке" , Ложь, "");
	СообщениеОбОшибке = "";
	
	Прокси = ОбменМобильноеПриложениеПовторноеИспользование.ПолучитьПрокси(СообщениеОбОшибке);
	Если Прокси <> Неопределено Тогда
		СтруктураОтвета.ОбменРазрешен = Истина;
	Иначе
		СтруктураОтвета.СообщениеОбОшибке = СообщениеОбОшибке;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	СисИнфо = Новый СистемнаяИнформация;
	НаименованиеУстройства = Константы.НаименованиеУстройства.Получить();
	ПериодЗагрузки = Строка(Перечисления.ПериодыВыгрузкиВМобильноеПриложение.ЗаПоследнийМесяц);
	
	Узел = ПланыОбмена.МобильноеПриложение.ЭтотУзел();
	Если ЗначениеЗаполнено(Узел.Код) Тогда
		
		КодМобильногоКомпьютера = Узел.Код;
		
	Иначе
		
		КодМобильногоКомпьютера = Новый УникальныйИдентификатор();
		
		ОбъектУзла = Узел.ПолучитьОбъект();
		ОбъектУзла.Код = КодМобильногоКомпьютера;
		ОбъектУзла.Наименование = НаименованиеУстройства;
		ОбъектУзла.Записать();
		
	КонецЕсли;
	
	ЦентральныйУзел = ПланыОбмена.МобильноеПриложение.НайтиПоКоду("001");
	Если ЦентральныйУзел.Пустая() Тогда
		
		НовыйУзел = ПланыОбмена.МобильноеПриложение.СоздатьУзел();
		НовыйУзел.Код = "001";
		НовыйУзел.Наименование = "Центральный";
		НовыйУзел.Записать();
		ЦентральныйУзел = НовыйУзел.Ссылка;
		
	КонецЕсли;
	
	// Если создан новый узел обмена или счетчики сообщений переинициализированы,
	// перерегистрируем данные.
	Если ЦентральныйУзел.НомерОтправленного = 0 Тогда
		
		ОбменМобильноеПриложениеВызовСервера.ОчиститьОчередьСообщенийОбмена();
		ОбменМобильноеПриложениеВызовСервера.ЗарегистрироватьИзмененияДанных(ЦентральныйУзел)
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СтруктураОтвета;
	
КонецФункции

&НаКлиенте
Процедура СинхронизироватьДанные()
		
	Если АвторизацияПройдена Тогда
		ПерейтиНаСтраницуСоединения();
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
		ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	Иначе
		ПерейтиНаСтраницуАвторизации();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеОбмена(СообщениеОбОшибке)
	
	Попытка
		ДанныеОбмена = Прокси.ПолучитьПакетОбмена(КодМобильногоКомпьютера, НомерСообщенияОбмена, ИдентификаторЗадания);
		СтруктураОтвета = ДанныеОбмена.Получить();
	Исключение
		Инфо = ИнформацияОбОшибке();
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(Инфо);
		ЕстьОшибки = Истина;
	КонецПопытки;
	
	Возврат СтруктураОтвета;
	
КонецФункции

&НаСервере
Функция ПолучитьНомерСообщенияОбмена()
	
	НомерСообщенияОбмена = НомерСообщенияОбмена + 1;
	
	// Получаем номер ближайшего недостающего сообщения очереди или номер сообщения,
	// следующего за максимальным.
	Если ПроверитьОчередьСообщений Тогда
		
		ВыборкаСообщенийОбмена = РегистрыСведений.ОчередьСообщенийОбмена.Выбрать(, "НомерСообщения Возр");
		Пока ВыборкаСообщенийОбмена.Следующий() Цикл
			
			Если ВыборкаСообщенийОбмена.НомерСообщения < НомерСообщенияОбмена Тогда
				Продолжить;
			ИначеЕсли ВыборкаСообщенийОбмена.НомерСообщения > НомерСообщенияОбмена Тогда
				Возврат НомерСообщенияОбмена;
			КонецЕсли;
			
			НомерСообщенияОбмена = НомерСообщенияОбмена + 1;
			
		КонецЦикла;
		
		ПроверитьОчередьСообщений = Ложь;
	КонецЕсли;
	
	Возврат НомерСообщенияОбмена;
	
КонецФункции

&НаСервере
Процедура ПрерватьВыполнениеЗагрузки(СообщениеОбОшибке)
	
	ОбработатьСтатусОбмена(СообщениеОбОшибке);
	ОбменМобильноеПриложениеВызовСервера.ОчиститьОчередьСообщенийОбмена();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнениеОбменаДанными()
	
	ИнициализироватьПараметрыИПерейтиНаСтраницуОбмена();
	
	ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеОбмена", 1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьДанные(СообщениеОбОшибке)
	
	НомерОтправленного = ЦентральныйУзел.НомерОтправленного;
	НомерПринятого = ЦентральныйУзел.НомерПринятого;
	
	Прокси = ОбменМобильноеПриложениеПовторноеИспользование.ПолучитьПрокси();
	Если Прокси = Неопределено Тогда
		ЕстьОшибки = Истина;
		СообщениеОбОшибке = НСтр("ru='Не удалось установить соединение с информационной базой.';en='Could not establish a connection to the database.'");
		ОбработатьСтатусОбмена();
		Возврат;
	КонецЕсли;
	
	// Отправляем данные.
	ПакетОбмена = ОбменМобильноеПриложениеВызовСервера.СформироватьПакетОбмена(ЦентральныйУзел, Прокси);
	ОтправитьПакетОбменаВСервисСИдентификатором(СообщениеОбОшибке, ПакетОбмена, НомерОтправленного, НомерПринятого);
	ОбработатьСтатусОбмена(СообщениеОбОшибке);
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьПакетОбменаВСервисСИдентификатором(СообщениеОбОшибке, ПакетОбмена, НомерОтправленного, НомерПринятого)
	
	Попытка
		ИДПодписчика = Константы.ИДПодписчикаУведомлений.Получить();
		ИДПодписчикаXDTO = СериализаторXDTO.ЗаписатьXDTO(ИДПодписчика);
		
		ДанныеОтвета = Прокси.ОтправитьПакетОбменаВСервисСИдентификатором(
			ПакетОбмена,
			КодМобильногоКомпьютера,
			НаименованиеУстройства,
			НомерОтправленного,
			НомерПринятого,
			ПериодЗагрузки,
			Константы.ТекущаяВерсияПриложения.Получить(),
			ИДПодписчикаXDTO
		);
		
		СтруктураОтвета = ДанныеОтвета.Получить();
		ИдентификаторЗадания = СтруктураОтвета.ИдентификаторЗадания;
		Если СтруктураОтвета.НовыйОбмен Тогда
			ОбменМобильноеПриложениеВызовСервера.ОчиститьОчередьСообщенийОбмена();
		КонецЕсли;
		
		Если СтруктураОтвета.Свойство("НужнаИнициализацияУзла") Тогда
			ОбменМобильноеПриложениеСервер.ИнициализироватьУзел();
		КонецЕсли;
		
		ПланыОбмена.УдалитьРегистрациюИзменений(ЦентральныйУзел);
		ОбменЗавершенОтправкаДанных = Истина;
	Исключение
		Инфо = ИнформацияОбОшибке();
		ПолноеОписание = Инфо.Описание;
		Пока Инфо.Причина <> Неопределено Цикл
			Инфо = Инфо.Причина;
			ПолноеОписание = ПолноеОписание + " - " + Инфо.Описание;
		КонецЦикла;
		Описание = Инфо.Описание;
		Если Найти(Описание, "нет прав на синхронизацию данных с мобильным приложением") Тогда
			СообщениеОбОшибке = НСтр("ru='У пользователя нет прав на синхронизацию данных с мобильным приложением.';en='The user does not have rights to the data synchronization with a mobile application. In the central database.'");
			РезервноеКопирование.ОчиститьБазу();
		ИначеЕсли Найти(Описание, "Устройству запрещена синхронизация с центральной базой.") Тогда
			СообщениеОбОшибке = НСтр("ru='Данному устройству запрещена синхронизация данных с мобильным приложением.';en='This device does not have rights to the data synchronization with a mobile application. In the central database.'");
			РезервноеКопирование.ОчиститьБазу();
		ИначеЕсли Найти(Описание, "Для синхронизации с центральной базой обновите приложение до версии не ниже") Тогда
			НачалоВерсии = Найти(Описание, "|")+1;
			ДлинаВерсии = Найти(Описание, "~")-НачалоВерсии; 
			СообщениеОбОшибке = СтрШаблон(НСтр("ru='Для синхронизации с центральной базой обновите приложение до версии не ниже %1';en='Update application to version %1 to have rights to the data synchronization with a mobile application. In the central database.'"), 
									Сред(Описание, НачалоВерсии, ДлинаВерсии));
		ИначеЕсли Найти(Описание, "Метод объекта не обнаружен") Тогда
			ОтправитьПакетОбменаВСервис(СообщениеОбОшибке, ПакетОбмена, НомерОтправленного, НомерПринятого); // Поддержка старых версий мобильного УНФ.
			Возврат;
		Иначе
			СообщениеОбОшибке = ПолноеОписание;
		КонецЕсли;
		ОбменЗавершенОтправкаДанных = Ложь;
		ЕстьОшибки = Истина;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьПакетОбменаВСервис(СообщениеОбОшибке, ПакетОбмена, НомерОтправленного, НомерПринятого)
	
	Попытка
		ДанныеОтвета = Прокси.ОтправитьПакетОбменаВСервис(
			ПакетОбмена,
			КодМобильногоКомпьютера,
			НаименованиеУстройства,
			НомерОтправленного,
			НомерПринятого,
			ПериодЗагрузки,
			Константы.ТекущаяВерсияПриложения.Получить()
		);
		
		СтруктураОтвета = ДанныеОтвета.Получить();
		ИдентификаторЗадания = СтруктураОтвета.ИдентификаторЗадания;
		Если СтруктураОтвета.НовыйОбмен Тогда
			ОбменМобильноеПриложениеВызовСервера.ОчиститьОчередьСообщенийОбмена();
		КонецЕсли;
		
		ПланыОбмена.УдалитьРегистрациюИзменений(ЦентральныйУзел);
		ОбменЗавершенОтправкаДанных = Истина;
	Исключение
		Инфо = ИнформацияОбОшибке();
		ПолноеОписание = Инфо.Описание;
		Пока Инфо.Причина <> Неопределено Цикл
			Инфо = Инфо.Причина;
			ПолноеОписание = ПолноеОписание + " - " + Инфо.Описание;
		КонецЦикла;
		Описание = Инфо.Описание;
		Если Найти(Описание, "нет прав на синхронизацию данных с мобильным приложением") Тогда
			СообщениеОбОшибке = НСтр("ru='У пользователя нет прав на синхронизацию данных с мобильным приложением.';en='The user does not have rights to the data synchronization with a mobile application. In the central database.'");
		ИначеЕсли Найти(Описание, "Метод объекта не обнаружен") Тогда
			СообщениеОбОшибке = НСтр("ru='Необходимо обновить серверную информационную базу. Минимально необходимая версия - 1.0.1.1.';en='You need to update the back-end database. The minimum required version is 1.0.1.1.'");
		Иначе
			СообщениеОбОшибке = ПолноеОписание;
		КонецЕсли;
		ОбменЗавершенОтправкаДанных = Ложь;
		ЕстьОшибки = Истина;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанные(СообщениеОбОшибке)
	
	Если НЕ ОжиданиеСообщенияОбмена Тогда
		НомерСообщенияОбмена = ПолучитьНомерСообщенияОбмена();
	КонецЕсли;
	
	Прокси = ОбменМобильноеПриложениеПовторноеИспользование.ПолучитьПрокси();
	Если Прокси = Неопределено Тогда
		ЕстьОшибки = Истина;
		СообщениеОбОшибке = НСтр("ru='Не удалось установить соединение с информационной базой.';en='Could not establish a connection to the database.'");
		ОбработатьСтатусОбмена(СообщениеОбОшибке);
		Возврат;
	КонецЕсли;
	
	СтруктураОтвета = ПолучитьДанныеОбмена(СообщениеОбОшибке);
	Если ЕстьОшибки Тогда
		ОбработатьСтатусОбмена(СообщениеОбОшибке);
		Возврат;
	КонецЕсли;
	
	Если СтруктураОтвета.ПрерватьЗагрузку Тогда
		ЕстьОшибки = Истина;
		ПрерватьВыполнениеЗагрузки(СообщениеОбОшибке);
		Возврат;
	КонецЕсли;
	
	// Если сообщения в центральной базе еще формируются, подключаем обработчик ожидания
	ОжиданиеСообщенияОбмена = СтруктураОтвета.Подождать;
	Если ОжиданиеСообщенияОбмена Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОтвета.ПродолжитьЗагрузку Тогда
		ОбменМобильноеПриложениеВызовСервера.ДобавитьСообщениеВОчередьСообщенийОбмена(НомерСообщенияОбмена, СтруктураОтвета.СообщениеОбмена);
	Иначе
		ОбменЗавершенЗагрузкаДанных = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанные(СообщениеОбОшибке, ПерезапуститьПриложение)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбменМобильноеПриложениеВызовСервера.ПроверитьОчередьСообщенийОбмена(ЕстьОшибки, СообщениеОбОшибке, ЦентральныйУзел.НомерПринятого);
	Если ЕстьОшибки Тогда
		ПрерватьВыполнениеЗагрузки(СообщениеОбОшибке);
		Возврат;
	КонецЕсли;
	
	Прокси = ОбменМобильноеПриложениеПовторноеИспользование.ПолучитьПрокси();
	Если Прокси = Неопределено Тогда
		ЕстьОшибки = Истина;
		СообщениеОбОшибке = НСтр("ru='Не удалось установить соединение с информационной базой.';en='Could not establish a connection to the database.'");
		ОбработатьСтатусОбмена(СообщениеОбОшибке);
		Возврат;
	КонецЕсли;
	
	КоличествоЗаписанных = 0;
	
	ОбменМобильноеПриложениеВызовСервера.ПринятьПакетыОбмена(
		ЦентральныйУзел,
		Прокси,
		КоличествоЗаписанных,
		ЕстьОшибки,
		СообщениеОбОшибке,
		ПерезапуститьПриложение
	);
	ОбменМобильноеПриложениеВызовСервера.ОчиститьОчередьСообщенийОбмена();
	
	Если ЕстьОшибки Тогда
		ПрерватьВыполнениеЗагрузки(СообщениеОбОшибке);
		Возврат;
	КонецЕсли;
	
	//ОбменМобильноеПриложениеВызовСервера.УдалитьДокументыНеСоответствующиеПериодуЗагрузки(ЦентральныйУзел);
	
	ОбменЗавершен = Истина;
	ОбработатьСтатусОбмена(СообщениеОбОшибке);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбменДанными()
	
	СообщениеОбОшибке = "";
	ПерезапуститьПриложение = Ложь;
	
	Если НЕ ОбменЗавершенОтправкаДанных Тогда
		
		ОбработатьСтатусОбмена(СообщениеОбОшибке, 25);
		
		ОтправитьДанные(СообщениеОбОшибке);
		
		Если ЕстьОшибки Тогда
			Возврат;
		КонецЕсли;
		
		ОжиданиеСообщенияОбмена = Ложь;
		
	ИначеЕсли НЕ ОбменЗавершенЗагрузкаДанных Тогда
		
		ОбработатьСтатусОбмена(СообщениеОбОшибке, 50);
		
		ПолучитьДанные(СообщениеОбОшибке);
		Если ЕстьОшибки 
			ИЛИ ОжиданиеСообщенияОбмена Тогда
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ОбменЗавершенЗагрузкаДанных
		И НЕ ОбменЗавершен Тогда
		
		ОбработатьСтатусОбмена(СообщениеОбОшибке, 75);
		
		ЗагрузитьДанные(СообщениеОбОшибке, ПерезапуститьПриложение);
		
	КонецЕсли;
	
	Если ОбменЗавершен Тогда
		
		ОбработатьСтатусОбмена(СообщениеОбОшибке, 100);
		
		Если ОбщегоНазначенияВызовСервера.ПолучитьЗначениеКонстанты("СоединениеСЦБУстановлено")
			И ОбщегоНазначенияВызовСервера.ПолучитьЗначениеКонстанты("РежимРаботыПриложения") = ПредопределенноеЗначение("Перечисление.РежимыРаботыПриложения.СборЗаявок") Тогда
		Иначе
			ОбщегоНазначенияВызовСервера.УстановитьЗначениеКонстанты("РежимРаботыПриложения", ПредопределенноеЗначение("Перечисление.РежимыРаботыПриложения.Многопользовательский"));
		КонецЕсли;
		ОбщегоНазначенияВызовСервера.УстановитьЗначениеКонстанты("ИспользоватьСинхронизациюДанных", Истина);
		ОбщегоНазначенияВызовСервера.УстановитьЗначениеКонстанты("РежимРаботыПриложения", ПредопределенноеЗначение("Перечисление.РежимыРаботыПриложения.Многопользовательский"));
		ОбщегоНазначенияВызовСервера.УстановитьЗначениеКонстанты("СоединениеСЦБУстановлено", Истина);
		Если ПерезапуститьПриложение Тогда
			ЗавершитьРаботуСистемы(Ложь, Истина);
		Иначе
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеОбмена()
	
	Если ОбменЗавершен Тогда
		
		ОбновитьОтображениеДанных();
		Возврат;
	
	Иначе
		
		ВыполнитьОбменДанными();
		ОбновитьОтображениеДанных();
		
		Если ЕстьОшибки Тогда
			УстановитьВидимостьСтраниц(2);
			Возврат;
		ИначеЕсли ОбменЗавершен Тогда
			Возврат;
		КонецЕсли;
	
	КонецЕсли;
	
	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал * ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	Если НЕ ОжиданиеСообщенияОбмена Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МинимальныйИнтервал;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания(
		"Подключаемый_ПроверитьВыполнениеОбмена",
		ПараметрыОбработчикаОжидания.ТекущийИнтервал,
		Истина
	);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПараметрыИПерейтиНаСтраницуОбмена()
	
	Прокси = Неопределено;
	ЕстьОшибки = Ложь;
	ПроверитьОчередьСообщений = Истина;
	ОбменЗавершен = Ложь;
	ОбменЗавершенОтправкаДанных = Ложь;
	ОбменЗавершенЗагрузкаДанных = Ложь;
	НомерСообщенияОбмена = ЦентральныйУзел.НомерПринятого;
	
	ОбработатьСтатусОбмена();
	
	УстановитьВидимостьСтраниц(3);
	
	ОбменЗавершен = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСтатусОбмена(СообщениеОбОшибке = "", ПроцентВыполнения = 0)
	
	Если ЕстьОшибки Тогда
		
		Если ПустаяСтрока(СообщениеОбОшибке) Тогда
			ТекстЗаголовка = НСтр("ru='Не удалось выполнить синхронизацию данных."
			"Попробуйте еще раз.';en='Unable to synchronize the data."
			"For details, see. in the central database.'"
			);
		Иначе
			ТекстЗаголовка = СообщениеОбОшибке;
		КонецЕсли;
		
		Элементы.ГруппаСинхронизацияВыполняется.Видимость = Ложь;
		Элементы.ГруппаСинхронизацияЗавершенаУспешно.Видимость = Ложь;
		Элементы.ГруппаСинхронизацияЗавершенаСОшибкой.Видимость = Истина;
		
		Элементы.Декорация23.Заголовок	= ТекстЗаголовка;
		Элементы.КнопкаОтмена.Заголовок = НСтр("ru='Закрыть';en='Close'");
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ОбменЗавершен Тогда
		
		Элементы.ГруппаСинхронизацияВыполняется.Видимость = Истина;
		Элементы.ГруппаСинхронизацияЗавершенаУспешно.Видимость = Ложь;
		Элементы.ГруппаСинхронизацияЗавершенаСОшибкой.Видимость = Ложь;
		
		Элементы.КнопкаОтмена.Заголовок = НСтр("ru='Остановить';en='Stop'");
		
	Иначе
		
		Элементы.ГруппаСинхронизацияВыполняется.Видимость = Ложь;
		Элементы.ГруппаСинхронизацияЗавершенаУспешно.Видимость = Истина;
		Элементы.ГруппаСинхронизацияЗавершенаСОшибкой.Видимость = Ложь;
		
		Элементы.КнопкаОтмена.Заголовок = НСтр("ru='Закрыть';en='Close'");
		
	КонецЕсли;
	
	Если ПроцентВыполнения = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗаголовка = "";
	Если ПроцентВыполнения = 25 Тогда
		ТекстЗаголовка = НСтр("ru='Выполняется синхронизация - 25%."
		"Отправка данных на сервер."
		"Пожалуйста, подождите...';en='Synchronize - 25%."
		"Please wait...'");
	ИначеЕсли ПроцентВыполнения = 50 Тогда
		ТекстЗаголовка = НСтр("ru='Выполняется синхронизация - 50%."
		"%КоличествоПакетов%"
		"Пожалуйста, подождите...';en='Synchronize - 50%."
		"Please wait...'");
	ИначеЕсли ПроцентВыполнения = 75 Тогда
		ТекстЗаголовка = НСтр("ru='Выполняется синхронизация - 75%."
		"Обработка полученных данных..."
		"Пожалуйста, подождите...';en='Synchronize - 75%."
		"Please wait...'");
	ИначеЕсли ПроцентВыполнения = 100 Тогда
		ТекстЗаголовка = НСтр("ru = 'Выполняется синхронизация - 100%.
		|Обмен завершен.';en='Synchronize - 100%."
		"Complete.'");
	КонецЕсли;
	
	Если ОжиданиеСообщенияОбмена Тогда
		СтрокаДляЗамены = НСтр("ru='Ожидание подготовки данных.';en='Waiting packages.'");
	Иначе
		КоличествоПакетов = ПолучитьКоличествоЗагруженныхПакетов();
		СтрокаДляЗамены = НСтр("ru='Загружено пакетов';en='Loaded packages'") + " - " + Строка(КоличествоПакетов) + ".";
	КонецЕсли;
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%КоличествоПакетов%", СтрокаДляЗамены);
	
	Если ТекстЗаголовка <> "" Тогда
		Элементы.Декорация19.Заголовок = ТекстЗаголовка;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКоличествоЗагруженныхПакетов()
	
	Запрос = НОвый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ОчередьСообщенийОбмена.НомерСообщения) КАК КолВо
	|ИЗ
	|	РегистрСведений.ОчередьСообщенийОбмена КАК ОчередьСообщенийОбмена";
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаЗапроса.Следующий() Тогда
		Возврат ВыборкаЗапроса.КолВо;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

#КонецОбласти
