#Область ВспомогательныеПроцедурыИФункции

&НаСервере
Функция ЗагрузитьБазуИзXML(ВерсияПриложения, СхемаКонфигурации, ИмяВыгрузки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
		
	Результат = Новый Структура("ЕстьОшибки, Описание, НеВсеДанныеЗагружены", Ложь, "", Ложь);
	
	ФайлВыгрузкиСервер = ЭтаФорма.РезервноеКопированиеСтрокаПодключения + ИмяВыгрузки + ".xml";
	ФайлВыгрузкиЛокальный = ПолучитьИмяВременногоФайла(".xml");
	
	Попытка
		КопироватьФайл(ФайлВыгрузкиСервер, ФайлВыгрузкиЛокальный);
	Исключение
		ТипОшибки = РезервноеКопирование.ИдентификацияОшибки(ИнформацияОбОшибке());
		Результат.ЕстьОшибки = Истина;
		Результат.Описание = РезервноеКопирование.ПолучитьОписаниеОшибки(ТипОшибки);
		Возврат Результат;
	КонецПопытки;
	
	Если ВерсияПриложения = "1.1.3.1"
		ИЛИ ВерсияПриложения = "1.1.3.2"
		ИЛИ ВерсияПриложения = "1.1.3.3"
		ИЛИ ВерсияПриложения = "1.1.4.1"
		ИЛИ ВерсияПриложения = "1.1.4.2" Тогда
		
		ПереходКСериализуемымОбъектам(ФайлВыгрузкиЛокальный);
	КонецЕсли;
	
	ФабрикаВыгрузки = ФабрикаВыгрузки(ВерсияПриложения, СхемаКонфигурации, Результат);
	Если Результат.ЕстьОшибки Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОбщегоНазначенияВызовСервера.ОчиститьБД();
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлВыгрузкиЛокальный);
	
	ЧтениеXML.Прочитать();
	ЧтениеXML.Прочитать();
	
	ПродолжитьЧтение = Истина;
	
	Пока ПродолжитьЧтение Цикл 
		
		ТипДанныхXML = ПолучитьXMLТип(ЧтениеXML);
		Если ТипДанныхXML = Неопределено Тогда 
			ПродолжитьЧтение = Ложь;
			Продолжить;
		КонецЕсли;
		
		ТипОбъекта = ФабрикаXDTO.Тип(ТипДанныхXML.URIПространстваИмен, ТипДанныхXML.ИмяТипа);
		Тип = СериализаторXDTO.ИзXMLТипа(ТипДанныхXML);
		Если Тип = Неопределено Тогда 
			ОбъектXDTOВыгрузки = ФабрикаВыгрузки.ПрочитатьXML(ЧтениеXML);
			Продолжить;
		КонецЕсли;
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		
		Если Метаданные.Константы.Содержит(ОбъектМетаданных) Тогда
			
			ОбъектXDTOВыгрузки = ФабрикаВыгрузки.ПрочитатьXML(ЧтениеXML);
			ОбъектXDTOКонфигурации = ФабрикаXDTO.Создать(ТипОбъекта);
			
			ЗаполнитьЗначенияСвойствОбъектаXDTO(ОбъектXDTOКонфигурации, ОбъектXDTOВыгрузки);
			
			Объект = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTOКонфигурации);
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.Записать();
			
		ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
			
			ОбъектXDTOВыгрузки = ФабрикаВыгрузки.ПрочитатьXML(ЧтениеXML);
			ОбъектXDTOКонфигурации = ФабрикаXDTO.Создать(ТипОбъекта);
			
			Если Метаданные.Справочники[ОбъектМетаданных.Имя].ДлинаКода > 0 Тогда
				НайденнаяСсылка = Справочники[ОбъектМетаданных.Имя].НайтиПоКоду(ОбъектXDTOВыгрузки.code);
			Иначе
				НайденнаяСсылка = Справочники[ОбъектМетаданных.Имя].НайтиПоНаименованию(ОбъектXDTOВыгрузки.Description, Истина);
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойствОбъектаXDTO(ОбъектXDTOКонфигурации, ОбъектXDTOВыгрузки);
			Объект = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTOКонфигурации);
			
			Если ЗначениеЗаполнено(НайденнаяСсылка) Тогда
				
				СтрокаИсключений = "";
				
				Если НЕ ЗначениеЗаполнено(Объект.Владелец) Тогда
					СтрокаИсключений = "Владелец";
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Объект.Родитель)Тогда
					СтрокаИсключений = 
						СтрокаИсключений 
					 + ?(ЗначениеЗаполнено(СтрокаИсключений), ",", "")
					 + "Родитель";
				КонецЕсли;
				
				СправочникОбъект = НайденнаяСсылка.ПолучитьОбъект();
				Если ЗначениеЗаполнено(СтрокаИсключений) Тогда
					ЗаполнитьЗначенияСвойств(СправочникОбъект, Объект,, СтрокаИсключений);
				Иначе
					ЗаполнитьЗначенияСвойств(СправочникОбъект, Объект);
				Конецесли;
				
				СправочникОбъект.ДополнительныеСвойства.Вставить("ЗапретитьПовторныйЗапускОбмена", Истина);
				СправочникОбъект.Записать();
			Иначе
				Объект.ДополнительныеСвойства.Вставить("ЗапретитьПовторныйЗапускОбмена", Истина);
				Объект.Записать();
			КонецЕсли;
			
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
			
			Регистр = РегистрыСведений[ОбъектМетаданных.Имя];
			
			ОбъектXDTOВыгрузки = ФабрикаВыгрузки.ПрочитатьXML(ЧтениеXML);
			ОбъектXDTOКонфигурации = ФабрикаXDTO.Создать(ТипОбъекта);
			
			Для каждого ЗаписьВыгрузки Из ОбъектXDTOВыгрузки.Record Цикл
				
				ЗаписьТип = ТипОбъекта.Свойства.Получить("Record").Тип;
				Запись = ФабрикаXDTO.Создать(ЗаписьТип);
				
				ЗаполнитьЗначенияСвойствОбъектаXDTO(Запись, ЗаписьВыгрузки);
				
				ОбъектXDTOКонфигурации.Record.Добавить(Запись);
				
			КонецЦикла;
			
			FilterТип = ТипОбъекта.Свойства.Получить("Filter").Тип;
			FilterОбъектXDTO = ФабрикаXDTO.Создать(FilterТип);
			
			Для каждого FilterItemВыгрузки Из ОбъектXDTOВыгрузки.Filter.FilterItem Цикл
				
				FilterItemТип = FilterТип.Свойства.Получить("FilterItem").Тип;
				FilterItemОбъектXDTO = ФабрикаXDTO.Создать(FilterItemТип);
				
				ЗаполнитьЗначенияСвойств(FilterItemОбъектXDTO, FilterItemВыгрузки, , "Usage, ComparisonType, ValueFrom, ValueTo");
				
				FilterОбъектXDTO.FilterItem.Добавить(FilterItemОбъектXDTO);
				
			КонецЦикла;
			ОбъектXDTOКонфигурации.Filter = FilterОбъектXDTO;
			
			НаборЗаписей = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTOКонфигурации);
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
			
		ИначеЕсли Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) Тогда
			
			Регистр = РегистрыНакопления[ОбъектМетаданных.Имя];
			
			ОбъектXDTOВыгрузки = ФабрикаВыгрузки.ПрочитатьXML(ЧтениеXML);
			ОбъектXDTOКонфигурации = ФабрикаXDTO.Создать(ТипОбъекта);
			
			Для каждого ЗаписьВыгрузки Из ОбъектXDTOВыгрузки.Record Цикл 
				ЗаписьТип = ТипОбъекта.Свойства.Получить("Record").Тип;
				Запись = ФабрикаXDTO.Создать(ЗаписьТип);
				
				ЗаполнитьЗначенияСвойствОбъектаXDTO(Запись, ЗаписьВыгрузки);
				ОбъектXDTOКонфигурации.Record.Добавить(Запись);
			КонецЦикла;
			
			FilterТип = ТипОбъекта.Свойства.Получить("Filter").Тип;
			FilterОбъектXDTO = ФабрикаXDTO.Создать(FilterТип);
			
			Для каждого FilterItemВыгрузки Из ОбъектXDTOВыгрузки.Filter.FilterItem Цикл 
				FilterItemТип = FilterТип.Свойства.Получить("FilterItem").Тип;
				FilterItemОбъектXDTO = ФабрикаXDTO.Создать(FilterItemТип);
				
				ЗаполнитьЗначенияСвойств(FilterItemОбъектXDTO, FilterItemВыгрузки, , "Value, Usage, ComparisonType, ValueFrom, ValueTo");
				
				ValueТип = ФабрикаXDTO.Тип(ЗаписьТип.URIПространстваИмен, "DocumentRef." + Метаданные.НайтиПоТипу(ТипЗнч(FilterItemВыгрузки.Value)).Имя);
				ValueОбъектXDTO = ФабрикаXDTO.Создать(ValueТип, FilterItemВыгрузки.Value);
				FilterItemОбъектXDTO.Value = ValueОбъектXDTO;
				
				FilterОбъектXDTO.FilterItem.Добавить(FilterItemОбъектXDTO);
			КонецЦикла;
			ОбъектXDTOКонфигурации.Filter = FilterОбъектXDTO;
			
			НаборЗаписей = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTOКонфигурации);
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
			
		ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
			
			ОбъектXDTOВыгрузки = ФабрикаВыгрузки.ПрочитатьXML(ЧтениеXML);
			ОбъектXDTOКонфигурации = ФабрикаXDTO.Создать(ТипОбъекта);
			
			ЗаполнитьЗначенияСвойствОбъектаXDTO(ОбъектXDTOКонфигурации, ОбъектXDTOВыгрузки);
			
			ЗаполнитьТЧОбъектаXDTO(ОбъектXDTOКонфигурации, ОбъектXDTOВыгрузки);
			
			ОбъектКонфигурации = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTOКонфигурации);
			ОбъектКонфигурации.ОбменДанными.Загрузка = Истина;
			ОбъектКонфигурации.ДополнительныеСвойства.Вставить("ЗапретитьОперацииСоСвязанымиДокументами", Истина);
			ОбъектКонфигурации.ДополнительныеСвойства.Вставить("ЗапретитьПовторныйЗапускОбмена", Истина);
			ОбъектКонфигурации.Записать();
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	ОбновлениеИнформационнойБазыПереопределяемый.ОбновитьПриложение();
	
	ЗафиксироватьТранзакцию();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПереходКСериализуемымОбъектам(ФайлВыгрузки)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлВыгрузки);
	
	ОбновленныйФайлВыгрузки = ПолучитьИмяВременногоФайла(".xml");
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ОбновленныйФайлВыгрузки);
	
	Родитель = "";
	Пока ЧтениеXML.Прочитать() Цикл 
		
		Пока ЧтениеXML.Имя = "Records" ИЛИ ЧтениеXML.Имя = "Товары" Цикл
			ЧтениеXML.Прочитать();
		КонецЦикла;
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда 
			
			Если ЧтениеXML.Имя = "Filter" Тогда 
				Родитель = "Filter";
			КонецЕсли;
			
			Если ЧтениеXML.Имя = "AccumulationRegisterRecordSet.Продажи" Тогда 
				Регистр = "AccumulationRegisterRecordSet.Продажи";
			КонецЕсли;
			
			Если Родитель = "Filter" И ЧтениеXML.Имя = "Recorder" Тогда 
				
				АтрибутType = ЧтениеXML.ПолучитьАтрибут("xsi:type");
				
				ЧтениеXML.Прочитать();
				Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда 
					ЗаписьXML.ЗаписатьКонецЭлемента();
					Продолжить;
				КонецЕсли;
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("FilterItem");
				ЗаписьXML.ЗаписатьАтрибут("xmlns", "http://v8.1c.ru/8.1/data/enterprise");
					ЗаписьXML.ЗаписатьНачалоЭлемента("Name");
					ЗаписьXML.ЗаписатьАтрибут("xsi:type", "xs:string");
					ЗаписьXML.ЗаписатьТекст("Recorder");
					ЗаписьXML.ЗаписатьКонецЭлемента();
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("Value");
					ЗаписьXML.ЗаписатьАтрибут("xmlns:d5p1", "http://v8.1c.ru/8.1/data/enterprise/current-config");
					Если АтрибутType <> Неопределено Тогда 
						ЗаписьXML.ЗаписатьАтрибут("xsi:type", "d5p1:" + АтрибутType);
					ИначеЕсли Регистр = "AccumulationRegisterRecordSet.Продажи" Тогда 
						ЗаписьXML.ЗаписатьАтрибут("xsi:type", "d5p1:DocumentRef.РасходТовара");
					КонецЕсли;
					ЗаписьXML.ЗаписатьТекст(ЧтениеXML.Значение);
					ЗаписьXML.ЗаписатьКонецЭлемента();
				ЗаписьXML.ЗаписатьКонецЭлемента();
				ЧтениеXML.Прочитать();
				Продолжить;
				
			Иначе
				
				Если ЧтениеXML.Имя = "MovementType" Тогда 
					ЧтениеXMLИмя = "RecordType";
				ИначеЕсли ЧтениеXML.Имя = "Row" Тогда 
					ЧтениеXMLИмя = "Товары";
				Иначе
					ЧтениеXMLИмя = ЧтениеXML.Имя;
				КонецЕсли;
				
				ЗаписьXML.ЗаписатьНачалоЭлемента(ЧтениеXMLИмя);
				
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					Если Регистр = "AccumulationRegisterRecordSet.Продажи"
						И ЧтениеXML.Имя = "xsi:type"
						И ЧтениеXML.Значение = "DocumentRef.РасходТовара" Тогда 
						
						Продолжить;
					КонецЕсли;
					
					ЗаписьXML.ЗаписатьАтрибут(ЧтениеXML.Имя, ЧтениеXML.Значение);
					
					Если ЧтениеXML.Имя = "xmlns:xsi" И ЧтениеXML.Значение = "http://www.w3.org/2001/XMLSchema-instance" Тогда 
						ЗаписьXML.ЗаписатьАтрибут("xmlns", "http://v8.1c.ru/8.1/data/enterprise/current-config");
						ЗаписьXML.ЗаписатьАтрибут("xmlns:xs", "http://www.w3.org/2001/XMLSchema");
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда 
			ЗаписьXML.ЗаписатьТекст(ЧтениеXML.Значение);
		КонецЕсли;
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда 
			Если ЧтениеXML.Имя = "Filter" Тогда 
				Родитель = "";
			КонецЕсли;
			
			Если ЧтениеXML.Имя = "AccumulationRegisterRecordSet.Продажи" Тогда 
				Регистр = "";
			КонецЕсли;
			
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	ЗаписьXML.Закрыть();
	
	ФайлВыгрузки = ОбновленныйФайлВыгрузки;
КонецПроцедуры

&НаСервере
Функция ФабрикаВыгрузки(ВерсияПриложения, СхемаКонфигурации, Результат)
	
	Схема = Неопределено;
	Если ВерсияПриложения = "1.1.3.1"
		ИЛИ ВерсияПриложения = "1.1.3.2"
		ИЛИ ВерсияПриложения = "1.1.3.3" Тогда
		ИмяМакета = "МодельXDTO_v_1_1_3_3";
	ИначеЕсли ВерсияПриложения = "1.1.4.1"
		ИЛИ ВерсияПриложения = "1.1.4.2" Тогда
		ИмяМакета = "МодельXDTO_v_1_1_4_2";
	ИначеЕсли ВерсияПриложения = "1.1.5.1"
		ИЛИ ВерсияПриложения = "1.1.6.2"
		ИЛИ ВерсияПриложения = "1.1.6.3" Тогда
		ИмяМакета = "МодельXDTO_v_1_1_6_3";
	Иначе
		Схема = ПолучитьИмяВременногоФайла(".xsd");
		Попытка
			КопироватьФайл(ЭтаФорма.РезервноеКопированиеСтрокаПодключения + СхемаКонфигурации + ".xsd", Схема);
		Исключение
			ТипОшибки = РезервноеКопирование.ИдентификацияОшибки(ИнформацияОбОшибке());
			Результат.ЕстьОшибки = Истина;
			Результат.Описание = РезервноеКопирование.ПолучитьОписаниеОшибки(ТипОшибки);
			Возврат Результат;
		КонецПопытки;
	КонецЕсли;
	
	Если Схема = Неопределено Тогда
		Макет = ПолучитьОбщийМакет(ИмяМакета);
		Схема = ПолучитьИмяВременногоФайла("xsd");
		Макет.Записать(Схема);
	КонецЕсли;
	
	ФабрикаВыгрузки = СоздатьФабрикуXDTO(Схема);
	
	Возврат ФабрикаВыгрузки;
	
КонецФункции

&НаСервере
Процедура ПустоеЗначение(ОбъектXDTOКонфигурации, Свойство)
	
	Если Свойство.Тип.Имя = "decimal" Тогда
		Значение = 0;
	ИначеЕсли Свойство.Тип.Имя = "string" Тогда
		Значение = "";
	ИначеЕсли Свойство.Тип.Имя = "dateTime" Тогда
		Значение = Дата(1, 1, 1);
	ИначеЕсли Свойство.Тип.Имя = "boolean" Тогда
		Значение = Ложь;
	ИначеЕсли Свойство.Тип.Имя = "ValueStorage" Тогда
		Значение = Новый ХранилищеЗначения(Неопределено);
	ИначеЕсли Свойство.Тип.Имя = "УникальныйИдентификатор" Тогда
		Значение = Новый УникальныйИдентификатор;
	ИначеЕсли Свойство.Тип.Имя = "CatalogRef.Контрагенты" Тогда
		Значение = Справочники.Контрагенты.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "CatalogRef.Товары" Тогда
		Значение = Справочники.Товары.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "CatalogRef.Статьи" Тогда
		Значение = Справочники.Товары.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "CatalogRef.СтавкиНДС" Тогда
		Значение = Справочники.СтавкиНДС.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "CatalogRef.КассыККМ" Тогда
		Значение = Справочники.КассыККМ.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "CatalogRef.СтруктурныеЕдиницы" Тогда
		Значение = Справочники.СтруктурныеЕдиницы.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "DocumentRef.ВводОстатков" Тогда
		Значение = Документы.ВводОстатков.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "DocumentRef.Визит" Тогда
		Значение = Документы.Визит.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "DocumentRef.ПриходДенег" Тогда
		Значение = Документы.ПриходДенег.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "DocumentRef.ПриходТовара" Тогда
		Значение = Документы.ПриходТовара.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "DocumentRef.РасходДенег" Тогда
		Значение = Документы.РасходДенег.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "DocumentRef.РасходТовара" Тогда
		Значение = Документы.РасходТовара.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "DocumentRef.ЧекККМ" Тогда
		Значение = Документы.ЧекККМ.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "DocumentRef.ЧекККМВозврат" Тогда
		Значение = Документы.ЧекККМВозврат.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "DocumentRef.ОтчетОРозничныхПродажах" Тогда
		Значение = Документы.ОтчетОРозничныхПродажах.ПустаяСсылка();
	ИначеЕсли Свойство.Тип.Имя = "EnumRef.СтатусЧекаККМ" Тогда
		Значение = Перечисления.СтатусЧекаККМ.ПустаяСсылка();
	КонецЕсли;
	
	ОбъектXDTOКонфигурации[Свойство.Имя] = ФабрикаXDTO.Создать(Свойство.Тип, Значение);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивСвойствИсключений(ОбъектXDTOКонфигурации, ОбъектXDTOВыгрузки)
	
	ТипAnyType = ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "anyType");
	МассивСвойствИсключений = Новый Массив;
	Для каждого Свойство Из ОбъектXDTOКонфигурации.Свойства() Цикл
		Если Свойство.Тип = ТипAnyType Тогда 
			МассивСвойствИсключений.Добавить(Свойство);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Свойство Из ОбъектXDTOВыгрузки.Свойства() Цикл
		Если ОбъектXDTOВыгрузки[Свойство.Имя] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если МассивСвойствИсключений.Найти(Свойство) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СвойствоКонфигурации = ОбъектXDTOКонфигурации.Свойства().Получить(Свойство.Имя);
		Если СвойствоКонфигурации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МассивСвойствИсключений.Добавить(СвойствоКонфигурации);
	КонецЦикла;
	
	Возврат МассивСвойствИсключений;
	
КонецФункции

&НаСервере
Функция МассивСвойствИсключенийВСтроку(Массив)
	
	СтрокаСвойствИсключений = "";
	Для каждого Элемент Из Массив Цикл 
		Если ЗначениеЗаполнено(СтрокаСвойствИсключений) Тогда 
			СтрокаСвойствИсключений = СтрокаСвойствИсключений + ",";
		КонецЕсли;
		СтрокаСвойствИсключений = СтрокаСвойствИсключений + Элемент.Имя;
	КонецЦикла;
	Возврат СтрокаСвойствИсключений;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЗначенияСвойствОбъектаXDTO(ОбъектXDTOКонфигурации, ОбъектXDTOВыгрузки)
	
	СвойстваИсключенияМассив = ПолучитьМассивСвойствИсключений(ОбъектXDTOКонфигурации, ОбъектXDTOВыгрузки);
	СвойстваИсключенияСтрока = МассивСвойствИсключенийВСтроку(СвойстваИсключенияМассив);
	
	ЗаполнитьЗначенияСвойств(ОбъектXDTOКонфигурации, ОбъектXDTOВыгрузки, , СвойстваИсключенияСтрока);
	
	Для каждого Свойство Из СвойстваИсключенияМассив Цикл
		
		Если ОбъектXDTOВыгрузки[Свойство.Имя] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеXML = СериализаторXDTO.XMLТип(ТипЗнч(ОбъектXDTOВыгрузки[Свойство.Имя]));
		НовыйОбъектТип = ФабрикаXDTO.Тип(ДанныеXML.URIПространстваИмен, ДанныеXML.ИмяТипа);
		
		НовыйОбъектXDTO = ФабрикаXDTO.Создать(НовыйОбъектТип, ОбъектXDTOВыгрузки[Свойство.Имя]);
		ОбъектXDTOКонфигурации[Свойство.Имя] = НовыйОбъектXDTO;
		
	КонецЦикла;
	
	КоллекцияСвойствВыгрузки = ОбъектXDTOВыгрузки.Свойства();
	ТипAnyType = ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "anyType");
	
	Для каждого Свойство Из ОбъектXDTOКонфигурации.Свойства() Цикл
		Если ОбъектXDTOКонфигурации[Свойство.Имя] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если КоллекцияСвойствВыгрузки.Получить(Свойство.Имя) = Неопределено
			И НЕ ЭтоГруппа(ОбъектXDTOКонфигурации) Тогда 
			
			ПустоеЗначение(ОбъектXDTOКонфигурации, Свойство);
		ИначеЕсли Свойство.Тип = ТипAnyType Тогда
			ОбъектXDTOКонфигурации[Свойство.Имя] = ФабрикаXDTO.Создать(ТипAnyType);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧОбъектаXDTO(ОбъектXDTOКонфигурации, ОбъектXDTOВыгрузки)
	
	Для каждого Свойство Из ОбъектXDTOВыгрузки.Свойства() Цикл 
		Если ТипЗнч(ОбъектXDTOВыгрузки[Свойство.Имя]) <> Тип("СписокXDTO") Тогда 
			Продолжить;
		КонецЕсли;
		
		СвойствоОбъектаXDTOКонфигурации = ОбъектXDTOКонфигурации.Свойства().Получить(Свойство.Имя);
		Если СвойствоОбъектаXDTOКонфигурации = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Для каждого ЭлементСпискаОбъектаXDTOВыгрузки Из ОбъектXDTOВыгрузки[Свойство.Имя] Цикл 
			ЭлементСпискаОбъектаXDTOКонфигурации = ФабрикаXDTO.Создать(СвойствоОбъектаXDTOКонфигурации.Тип);
			ЗаполнитьЗначенияСвойств(ЭлементСпискаОбъектаXDTOКонфигурации, ЭлементСпискаОбъектаXDTOВыгрузки);
			ОбъектXDTOКонфигурации[Свойство.Имя].Добавить(ЭлементСпискаОбъектаXDTOКонфигурации);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЭтоГруппа(ОбъектXDTO)
	
	СвойствоЭтоГруппа = ОбъектXDTO.Свойства().Получить("IsFolder");
	Если СвойствоЭтоГруппа = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
	Если ОбъектXDTO["IsFolder"] = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ?(ОбъектXDTO["IsFolder"], Истина, Ложь);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("СтрокаПодключения") Тогда 
		ЭтаФорма.РезервноеКопированиеСтрокаПодключения = Параметры.СтрокаПодключения;
	КонецЕсли;
	
	Если Параметры.Свойство("ВыгруженныеБазы") Тогда // для поддержки старого варианта загрузки.
		ЭтаФорма.ВыгруженныеБазы.Загрузить(Параметры.ВыгруженныеБазы.Выгрузить());
	КонецЕсли;
	
	Если Параметры.Свойство("АдресВыгруженныеБазы") Тогда 
		ЭтаФорма.ВыгруженныеБазы.Загрузить(ПолучитьИзВременногоХранилища(Параметры.АдресВыгруженныеБазы));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВыгруженныеБазыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекстВопроса = НСтр("ru='При восстановлении информационной базы, все текущие данные будут удалены.
					|Продолжить?';en='When restoring the database, all existing data will be deleted.
					|Continue?'");
	Ответ = Вопрос("", РежимДиалогаВопрос.ДаНет,,,ТекстВопроса);
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	ВыбраннаяБаза = Элемент.ТекущиеДанные.ИмяФайла;
	ВерсияПриложения = Элемент.ТекущиеДанные.ВерсияПриложения;
	СхемаКонфигурации = Элемент.ТекущиеДанные.СхемаКонфигурации;
	
	Результат = ЗагрузитьБазуИзXML(ВерсияПриложения, СхемаКонфигурации, ВыбраннаяБаза);
	
	Если НЕ Результат.ЕстьОшибки Тогда 
		Ответ = Вопрос("", РежимДиалогаВопрос.ОК,,, НСтр("ru='Информационная база успешно восстановлена!';en='Database successfully restored!'"));
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			ОбновитьИнтерфейс();
			Оповестить("ВыполненоВосстановлениеИнформационнойБазы");
			ЭтаФорма.Закрыть();
		КонецЕсли;
	ИначеЕсли Результат.НеВсеДанныеЗагружены Тогда 
		Сообщение = НСтр("ru='Не все данные были загружены.';en='Not all data have been downloaded.'");
		Предупреждение(Сообщение);
		ОбновитьИнтерфейс();
		Оповестить("ВыполненоВосстановлениеИнформационнойБазы");
	Иначе
		Предупреждение(Результат.Описание);
		ОбновитьИнтерфейс();
		Оповестить("ВыполненоВосстановлениеИнформационнойБазы");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
