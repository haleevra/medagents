

#Область ВспомогательныеПроцедурыИФункции

&НаСервере
Процедура ПрочитатьКонстанты()
	
	Набор = Константы.СоздатьНабор();
	Набор.Прочитать();
	ЗначениеВРеквизитФормы(Набор, "НаборКонстант");
	
	Если НЕ ЗначениеЗаполнено(НаборКонстант.ВариантРазделителяCSV) Тогда
		НаборКонстант.ВариантРазделителяCSV = Перечисления.ВариантыРазделителейCSV.Авто;
	Конецесли;
	
	КодДоступаВключен = ЗначениеЗаполнено(Константы.КодДоступа.Получить());
	РежимРаботы = Константы.РежимРаботыПриложения.Получить();

КонецПроцедуры

&НаСервере
Процедура ЗаписатьКонстанты()
	
	УстановитьПривилегированныйРежим(Истина);
	Набор = РеквизитФормыВЗначение("НаборКонстант");
	Набор.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеАвторизации()
	
	ИмяПользователя = ОбщегоНазначенияВызовСервера.ПолучитьЗначениеКонстанты("ПользовательЦентральнойБазы");
	СоединениеСЦБУстановлено = Константы.СоединениеСЦБУстановлено.Получить();
	Если СоединениеСЦБУстановлено Тогда
		Элементы.ПодключитьсяОтключиться.Заголовок = НСтр("ru='Настройки подключения';en='Synchronization Settings'");
	Иначе
		ИмяПользователя = НСтр("ru='Не подключен';en='Not sync'");
		Элементы.ПодключитьсяОтключиться.Заголовок = НСтр("ru='Подключиться к сервису';en='Synchronize'");
	КонецЕсли;
	
	//Если ОбменМобильноеПриложениеВызовСервера.ЕстьПолныеПрава() Тогда
	//	Элементы.ГруппаПользователи.Видимость = СоединениеСЦБУстановлено;
	//Иначе
	//	Элементы.ГруппаПользователи.Видимость = Ложь;
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЗадатьКодДоступа()
	
	Элементы.ГруппаНастройкаКодДоступа.Видимость = КодДоступаВключен;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПрочитатьКонстанты();
	
	УстановитьДоступностьЗадатьКодДоступа();
	
	ЭтаФорма.НаименованиеПриложения = "MobileMedAgent";
	УстановитьСостояниеАвторизации();
	
	Если НЕ ОбменМобильноеПриложениеВызовСервера.ЕстьПолныеПрава() Тогда
		Элементы.ГруппаПользователи.Видимость = Ложь;
		Элементы.ГруппаРезервноеКопирование.Видимость = Ложь;
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ЗаписатьКонстанты();
	Оповестить("ИзменилисьНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПрошелОбмен" Тогда
		УстановитьСостояниеАвторизации();
		ПеречитатьНаборКонстант();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеречитатьНаборКонстант()
	
	НК = ДанныеФормыВЗначение(НаборКонстант, Тип("КонстантыНабор"));
	НК.Прочитать();
	ЗначениеВДанныеФормы(НК, НаборКонстант);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура КодДоступаПереключательПриИзменении(Элемент)
	
	Если КодДоступаВключен Тогда
		Результат = ОткрытьФормуМодально("ОбщаяФорма.УстановкаКодаДоступаВПриложение");
		Если Результат = Неопределено Тогда
			КодДоступаВключен = НЕ КодДоступаВключен;
		ИначеЕсли Результат <> Неопределено И НЕ Результат Тогда
			КодДоступаВключен = Ложь;
		КонецЕсли;
	Иначе
		Результат = ОткрытьФормуМодально("ОбщаяФорма.ВводКодаДоступаВПриложение");
		Если Результат = Неопределено Тогда
			КодДоступаВключен = НЕ КодДоступаВключен;
		ИначеЕсли Результат <> Неопределено И Результат Тогда
			КодДоступаВключен = Ложь;
			ОбщегоНазначенияВызовСервера.УстановитьЗначениеКонстанты("КодДоступа", "");
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьЗадатьКодДоступа();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СписокПользователей(Команда)
	
	ОткрытьФорму("Справочник.Пользователи.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСинхронизации(Команда)
	
	ОткрытьФорму("ОбщаяФорма.НастройкиСинхронизации");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьКодДоступа(Команда)
	
	ОткрытьФормуМодально("ОбщаяФорма.УстановкаКодаДоступаВПриложение");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолныеПрава(Команда)
	
	ОбработкаКомандыПолныеПраваНаСервере();
	ЗавершитьРаботуСистемы(Ложь, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаКомандыПолныеПраваНаСервере()

	УстановитьПривилегированныйРежим(Истина);
	ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	ТекущийПользователь.Роли.Очистить();
	ТекущийПользователь.Роли.Добавить(Метаданные.Роли.БазовыеПрава);
	ТекущийПользователь.Роли.Добавить(Метаданные.Роли.ПолныеПрава);
	ТекущийПользователь.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоРозница(Команда)
	
	ОбработкаКомандыТолькоРозницаНаСервере();
	ЗавершитьРаботуСистемы(Ложь, Истина);

КонецПроцедуры

&НаСервере
Процедура ОбработкаКомандыТолькоРозницаНаСервере()

	УстановитьПривилегированныйРежим(Истина);
	ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	ТекущийПользователь.Роли.Очистить();
	ТекущийПользователь.Роли.Добавить(Метаданные.Роли.БазовыеПрава);
	ТекущийПользователь.Роли.Добавить(Метаданные.Роли.РозницаПросмотрИРедактирование);
	ТекущийПользователь.Роли.Добавить(Метаданные.Роли.ЧтениеОстатокТоваров);
	//ТекущийПользователь.Роли.Добавить(Метаданные.Роли.НоменклатураТолькоПросмотр);
	ТекущийПользователь.Записать();
	
КонецПроцедуры

#КонецОбласти