////////////////////////////////////////////////////////////////////////////////
// МОДУЛЬ СОДЕРЖИТ ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С БД
// - установка и получение значений параметров сеанса
// - обработка запуска приложения
// - получение значений реквизитов объекта
// - удаление данных приложения
// - удаление объекта
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

/////////////////////////
// ПАРАМЕТРЫ СЕАНСА

// Возвращает значение параметра сеанса "ВерсияОС".
//
// Возвращаемое значение:
// Строка
//
Функция ВерсияОС() Экспорт
	
	Возврат ПараметрыСеанса.ВерсияОС;
	
КонецФункции // ВерсияОС()

// Возвращает значение параметра сеанса "ВысотаЭкрана".
//
// Возвращаемое значение:
// Число
//
Функция ВысотаЭкрана() Экспорт
	
	Возврат ПараметрыСеанса.ВысотаЭкрана;
	
КонецФункции // ВысотаЭкрана()

// Возвращает значение параметра сеанса "РазмерШрифтаИнтерфейса".
//
// Возвращаемое значение:
// Число
//
Функция РазмерШрифтаИнтерфейса() Экспорт
	
	Возврат ПараметрыСеанса.РазмерШрифтаИнтерфейса;
	
КонецФункции // РазмерШрифтаИнтерфейса()

// Возвращает значение параметра сеанса "ШиринаЭкрана".
//
// Возвращаемое значение:
// Число
//
Функция ШиринаЭкрана() Экспорт
	
	Возврат ПараметрыСеанса.ШиринаЭкрана;
	
КонецФункции // ШиринаЭкрана()

// Возвращает значение параметра сеанса "Смартфон".
//
// Возвращаемое значение:
// Булево
//
Функция ЭтоСмартфон() Экспорт
	
	Возврат ПараметрыСеанса.Смартфон;
	
КонецФункции // ЭтоСмартфон()

// Обрабатывает запуск приложения
//
Функция ОбработатьЗапускПриложения(Отказ, ПользовательСоздан) Экспорт
	
	ОбщегоНазначенияСервер.ОбработатьЗапускПриложения(Отказ, ПользовательСоздан);
	
КонецФункции // ОбработатьЗапускПриложения()

// Обновляет приложение
//
Функция ОбновитьПриложение() Экспорт
	
	ОбновлениеИнформационнойБазыПереопределяемый.ОбновитьПриложение();
	
КонецФункции // ОбновитьПриложение()

// Удаляет данные мобильного приложения.
Процедура ОчиститьБД() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивУдаляемыхРегистровСведений = Новый Массив;
	Для Каждого Регистр Из Метаданные.РегистрыСведений Цикл
		Если Найти(Регистр.Имя, "Удалить") = 0 Тогда 
			МассивУдаляемыхРегистровСведений.Добавить(Регистр.Имя);
		КонецЕсли;
	КонецЦикла;
	ОбщегоНазначенияСервер.ОчиститьРегистрыСведений(МассивУдаляемыхРегистровСведений);
	МассивУдаляемыхРегистровНакопления = Новый Массив;
	Для Каждого Регистр Из Метаданные.РегистрыНакопления Цикл 
		Если Найти(Регистр.Имя, "Удалить") = 0 Тогда 
			МассивУдаляемыхРегистровНакопления.Добавить(Регистр.Имя);
		КонецЕсли;
	КонецЦикла;
	ОбщегоНазначенияСервер.ОчиститьРегистрыНакопления(МассивУдаляемыхРегистровНакопления);
	МассивУдаляемыхСправочников = Новый Массив;
	Для Каждого Справочник Из Метаданные.Справочники Цикл
		Если Найти(Справочник.Имя, "Удалить") = 0 Тогда
			МассивУдаляемыхСправочников.Добавить(Справочник.Имя);
		КонецЕсли;
	КонецЦикла;
	ОбщегоНазначенияСервер.ПометитьНаУдалениеСправочники(МассивУдаляемыхСправочников, Истина);
	МассивУдаляемыхДокументов = Новый Массив;
	Для Каждого Документ Из Метаданные.Документы Цикл
		Если Найти(Документ.Имя, "Удалить") = 0 Тогда
			МассивУдаляемыхДокументов.Добавить(Документ.Имя);
		КонецЕсли;
	КонецЦикла;
	ОбщегоНазначенияСервер.ПометитьНаУдалениеДокументы(МассивУдаляемыхДокументов,,, Истина);
	ГлавныйУзел = ПланыОбмена.МобильноеПриложение.ЭтотУзел();
	Узлы = ПланыОбмена.МобильноеПриложение.Выбрать();
	Пока Узлы.Следующий() Цикл
		Если Не ГлавныйУзел = Узлы.Ссылка Тогда
			Узлы.ПолучитьОбъект().Удалить();
		КонецЕсли;
	КонецЦикла;
	Для Каждого Константа Из Константы Цикл 
		Константа.Установить(Неопределено);
	КонецЦикла;
	
КонецПроцедуры

// Получает значение любой константы.
//
Функция ПолучитьЗначениеКонстанты(ИмяКонстанты) Экспорт
	
	Возврат Константы[ИмяКонстанты].Получить();
	
КонецФункции

// Устанавливает значение любой константы.
//
Процедура УстановитьЗначениеКонстанты(ИмяКонстанты, Значение) Экспорт
	
	Константы[ИмяКонстанты].Установить(Значение);
	
Конецпроцедуры

// Кодирует строку.
//
Функция Кодировать(Строка) Экспорт
	
	Возврат КодироватьСтроку(Строка, СпособКодированияСтроки.КодировкаURL);
	
КонецФункции

// Устанавливает значение идентификатора подписчика пуш уведомлений.
//
Процедура УстановитьЗначениеИДПодписчикаУведомлений(ИдентификаторПодписчика) Экспорт
	
	Константы.ИДПодписчикаУведомлений.Установить(Новый ХранилищеЗначения(ИдентификаторПодписчика));
	
Конецпроцедуры

#КонецОбласти

