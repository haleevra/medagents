#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ВЫГРУЗКИ

// Функция выполняет проверку того, что данные нужно переностить в данный узел
//
// Параметры:
//  Данные	– Объект, набор записей, который нужно проверить.
//			То, что переносится везде, не обрабатывается
//  УзелОбмена - узел плана обмена, куда осуществляется перенос
//
// Возвращаемое значение:
//  Перенос - булево, если Истина - необходимо выполнять перенос,
//			  иначе - перенос выполнять не нужно
//
Функция НуженПереносДанных(Данные, УзелОбмена) Экспорт
	
	// В данном случае, переносятся все данные.
	Возврат Истина;
	
КонецФункции // НуженПереносДанных()

// Процедура записывает данные в формат XML
// Процедура анализирует переданный объект данных и на основе этого анализа
// записывает его определенным образом в формат XML
//
// Параметры:
//  ЗаписьXML	- объект, записывающий XML данные
//  Данные 		- данные, подлежащие записи в формат XML
//
Процедура ЗаписатьДанные(ВозвращаемыйСписок, Прокси, Данные) Экспорт
	
	ОбъектXDTO = ОбменМобильноеПриложениеПравилаВыгрузки.ПолучитьОбъектXDTO(Прокси, Данные);
	
	Если ОбъектXDTO <> Неопределено Тогда
		ВозвращаемыйСписок.объекты.Добавить(ОбъектXDTO);
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьДанные()

// Функция формирует пакет обмена, который будет отправлен узлу "УзелОбмена" 
//
// Параметры:
//  УзелОбмена	– узел плана обмена "МобильноеПриложение", с которым осуществляется обмен
//
// Возвращаемое значение:
//  сформированный пакет, помещенный в хранилище значения
	Функция СформироватьПакетОбмена(УзелОбмена, Прокси) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ЗаписьXML = Новый ЗаписьXML;
	
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, УзелОбмена);
	
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8",  "http://v8.1c.ru/data");
	
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелОбмена, ЗаписьСообщения.НомерСообщения);
	
	ВозвращаемыйСписок = СоздатьОбъект(Прокси, "Объекты");
	
	Пока ВыборкаИзменений.Следующий() Цикл
		
		Данные = ВыборкаИзменений.Получить();
		
		// Если перенос данных не нужен, то, возможно, необходимо записать удаление данных
		Если НЕ ОбменМобильноеПриложениеВызовСервера.НуженПереносДанных(Данные, УзелОбмена) Тогда
			
			// Получаем значение с возможным удалением данных
			УдалениеДанных(Данные);
			
		КонецЕсли;
		
		// Записываем данные в сообщение
		ОбменМобильноеПриложениеВызовСервера.ЗаписатьДанные(ВозвращаемыйСписок, Прокси, Данные);
		
	КонецЦикла;
	
	Прокси.ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ВозвращаемыйСписок);
	
	ЗаписьСообщения.ЗакончитьЗапись();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Новый ХранилищеЗначения(ЗаписьXML.Закрыть());
	
КонецФункции // СформироватьПакетОбмена()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ЗАГРУЗКИ

// Процедура вносит в информационную базу данные, которые присланы из узла "УзелОбмена" 
//
// Параметры:
//  УзелОбмена	– узел плана обмена "МобильноеПриложение", с которым осуществляется обмен
//  ДанныеОбмена - пакет обмена полученный из узла УзелОбмена, помещен в ХранилищеЗначения
//
Процедура ПринятьПакетыОбмена(УзелОбмена, Прокси, КоличествоЗаписанных, ЕстьОшибки, СообщениеОбОшибке, ПерезапуститьПриложение) Экспорт
	
	Попытка
		ОбменМобильноеПриложениеПравилаЗагрузки.ЗагрузитьОбъекты(УзелОбмена, Прокси, КоличествоЗаписанных, ПерезапуститьПриложение);
	Исключение
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЕстьОшибки = Истина;
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
	КонецПопытки;
	
	Если ЕстьОшибки Тогда
		ОбменМобильноеПриложениеФоновыеЗадания.УстановитьКонстантыПриСтарте();
		//ОбменМобильноеПриложениеВызовСервера.ПереинициализироватьСчетчикиСообщенийНаУзлеПланаОбмена(УзелОбмена);
	КонецЕсли;
	
КонецПроцедуры // ПринятьПакетыОбмена()

// Процедура выполняет дозаполнение документов.
//
Процедура ВыполнитьОтложеннуюОбработкуДокументов(УзелОбмена, ДокументыДляОтложеннойОбработки) Экспорт
	
	Для каждого ТекДок Из ДокументыДляОтложеннойОбработки Цикл
		
		Если ТекДок.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ТекДок) = Тип("ДокументСсылка.Визит") Тогда
			
			ДокОбъект = ТекДок.ПолучитьОбъект();
			Если ДокОбъект = Неопределено
				ИЛИ НЕ ДокОбъект.Проведен Тогда
				Продолжить;
			КонецЕсли;
						
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьОтложеннуюОбработкуДокументов()

// Процедура добавляет сообщение обмена в очередь сообщений для загрузки.
//
Процедура ДобавитьСообщениеВОчередьСообщенийОбмена(НомерСообщенияОбмена, СообщениеОбмена) Экспорт
	
	НаборЗаписей = РегистрыСведений.ОчередьСообщенийОбмена.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НомерСообщения.Установить(НомерСообщенияОбмена);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.НомерСообщения = НомерСообщенияОбмена;
	НоваяЗапись.СообщениеОбмена = СообщениеОбмена;
	
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры // ДобавитьСообщениеВОчередьСообщенийОбмена()

// Проверяет порядок следования сообщений в очереди, после номера последнего успешно принятого сообщения.
Процедура ПроверитьОчередьСообщенийОбмена(ЕстьОшибки, СообщениеОбОшибке, Знач НомерПринятого) Экспорт
	
	ВыборкаСообщенийОбмена = РегистрыСведений.ОчередьСообщенийОбмена.Выбрать(, "НомерСообщения Возр");
	
	НомерСообщенияДляПроверки = НомерПринятого + 1;
	Пока ВыборкаСообщенийОбмена.Следующий() Цикл
		
		Если ВыборкаСообщенийОбмена.НомерСообщения < НомерСообщенияДляПроверки Тогда
			Продолжить;
		ИначеЕсли ВыборкаСообщенийОбмена.НомерСообщения > НомерСообщенияДляПроверки Тогда
			ЕстьОшибки = Истина;
			СообщениеОбОшибке = НСтр("ru='Не удалось выполнить загрузку данных.';en='Failed to load data.'");
		КонецЕсли;
		
		НомерСообщенияДляПроверки = НомерСообщенияДляПроверки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Очищает очередь сообщений для загрузки.
//
Процедура ОчиститьОчередьСообщенийОбмена() Экспорт
	
	НаборЗаписей = РегистрыСведений.ОчередьСообщенийОбмена.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры // ОчиститьОчередьСообщенийОбменаСМобильнымКлиентом()

// Удаляет сообщение из очереди сообщений для загрузки.
//
Процедура УдалитьСообщениеОбменаИзОчереди(Знач НомерСообщения) Экспорт
	
	НаборЗаписей = РегистрыСведений.ОчередьСообщенийОбмена.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.Отбор.НомерСообщения.Установить(НомерСообщения);
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры // ОчиститьОчередьСообщенийОбменаСМобильнымКлиентом()

// Процедура обнуляет номер принятого и отправленного сообщений на узле плана обмена.
//
Процедура ПереинициализироватьСчетчикиСообщенийНаУзлеПланаОбмена(УзелОбмена) Экспорт
	
	УзелОбменаОбъект = УзелОбмена.ПолучитьОбъект();
	УзелОбменаОбъект.НомерОтправленного = 0;
	УзелОбменаОбъект.НомерПринятого = 0;
	УзелОбменаОбъект.Записать();
	
КонецПроцедуры // ПереинициализироватьСчетчикиСообщенийНаУзлеПланаОбмена()

// Функция, возвращает на клиент значения константы
// ПользовательЦентральнойБазы
//
Функция ПользовательЦентральнойБазы() Экспорт
	
	Возврат Константы.ПользовательЦентральнойБазы.Получить();
	
КонецФункции

// Процедура проверяет значения констант, которые необходимы для синхронизации.
//
Процедура ПроверитьЗаполениеКонстант() Экспорт
	
	НаборКонстант = Константы.СоздатьНабор("АдресЦентральнойБазы, ПользовательЦентральнойБазы, ПериодЗагрузки");
	НаборКонстант.Прочитать();
	Если НЕ ЗначениеЗаполнено(НаборКонстант.ПериодЗагрузки) Тогда
		НаборКонстант.ПериодЗагрузки = Перечисления.ПериодыВыгрузкиВМобильноеПриложение.ЗаПоследнийМесяц;
	КонецЕсли;
	НаборКонстант.Записать();
	
КонецПроцедуры // ПроверитьЗаполениеКонстант()

// Функция выполняет построение WSПрокси к веб-сервису для синхронизации данных
//
// Параметры:
//  Пароль	– пароль для доступа в ИБ, которая предоставляет веб-сервис
//
// Возвращаемое значение:
//  WSПрокси к веб-сервису
//
Функция ПолучитьПрокси(Пароль) Экспорт
	
	ПроверитьЗаполениеКонстант();
	
	Адрес = Константы.АдресЦентральнойБазы.Получить();
	Пользователь = Константы.ПользовательЦентральнойБазы.Получить();
	
	Адрес = СокрЛП(Адрес) + "/ws/MobileService?wsdl";
	
	Определения = Новый WSОпределения(Адрес, Пользователь, Пароль);
	
	URI = URIПространстваИменСервиса();
	Прокси = Новый WSПрокси(Определения, URI, "MobileService", "MobileServiceSoap");
	Прокси.Пользователь = СокрЛП(Пользователь);
	Прокси.Пароль = Пароль;
	
	Возврат Прокси;
	
КонецФункции // ПолучитьПрокси()

// Сервисная функция, возвращает URI веб-сервиса.
//
Функция URIПространстваИменСервиса() Экспорт
	
	Возврат "http://www.prof-it.ru/ma/MobileExchange";
	
КонецФункции // URIПространстваИменСервиса()

// Сервисная функция для начальной инициализации БД, проверяет что синхронизация данных ранее не проводилась
Функция ОбменаНеБыло() Экспорт
	
	Узел = ПланыОбмена.МобильноеПриложение.ЭтотУзел();
	Возврат НЕ ЗначениеЗаполнено(Узел.Код);
	
КонецФункции // ОбменаНеБыло()

// Функция проверяет наличие настроек обмена.
//
Функция ЕстьНастройкиОбмена() Экспорт
	
	Возврат ЗначениеЗаполнено(Константы.АдресЦентральнойБазы.Получить());
	
КонецФункции // ЕстьНастройкиОбмена()

// Функция возвращает настройку обмена.
//
// Возвращаемое значение:
//  Булево
//
Функция ОбменВключен() Экспорт
	
	Возврат Константы.ИспользоватьСинхронизациюДанных.Получить();
	
КонецФункции // ОбменВключен()

// Возвращает настройку входа в центральную базу.
//
// Возвращаемое значение:
// Булево
//
Функция ВходВЦентральнуюБазуВыполнен() Экспорт
	
	Возврат Константы.СоединениеСЦБУстановлено.Получить();
	
КонецФункции // ВходВЦентральнуюБазуВыполнен()

// Возвращает признак автономного режима работы.
//
Функция ЭтоАвтономныйРежим() Экспорт
	
	Возврат Константы.РежимРаботыПриложения.Получить() = Перечисления.РежимыРаботыПриложения.Автономный;
	
КонецФункции // ЭтоАвтономныйРежим()

// Возвращает признак многопользовательского режима работы.
//
Функция ЭтоМногопользовательскийРежим() Экспорт
	
	Возврат Константы.РежимРаботыПриложения.Получить() = Перечисления.РежимыРаботыПриложения.Многопользовательский;
	
КонецФункции // ЭтоМногопользовательскийРежим()

Функция ПолучитьОтборыДляВыгрузкиДокументов()
	
	//Если ПериодВыгрузкиВМобильноеПриложение = Перечисления.ПериодыВыгрузкиВМобильноеПриложение.ЗаПоследнийКвартал Тогда
	//	ДатаНачалаВыгрузки = НачалоКвартала(ТекущаяДата());
	//ИначеЕсли ПериодВыгрузкиВМобильноеПриложение = Перечисления.ПериодыВыгрузкиВМобильноеПриложение.ЗаПоследнийМесяц Тогда
		ДатаНачалаВыгрузки = ДобавитьМесяц(НачалоДня(ТекущаяДата()), -1);
	//ИначеЕсли ПериодВыгрузкиВМобильноеПриложение = Перечисления.ПериодыВыгрузкиВМобильноеПриложение.ЗаПоследнююНеделю Тогда
	//	ДатаНачалаВыгрузки = НачалоНедели(ТекущаяДата());
	//ИначеЕсли ПериодВыгрузкиВМобильноеПриложение = Перечисления.ПериодыВыгрузкиВМобильноеПриложение.ЗаПоследнийДень Тогда
	//	ДатаНачалаВыгрузки = НачалоДня(ТекущаяДата());
	//Иначе
	//	ДатаНачалаВыгрузки = '00010101';
	//КонецЕсли;
	
	ОтборыДляВыгрузкиДокументов = Новый Структура;
	
	ОтборыДляВыгрузкиДокументов.Вставить("ДатаНачалаВыгрузки", ДатаНачалаВыгрузки);
	
	Возврат ОтборыДляВыгрузкиДокументов;
	
КонецФункции // ПолучитьОтборыДляВыгрузкиДокументовВМобильноеПриложение()

// Процедура регистрирует изменения, для всех данных, входящих в состав плана обмена
// Параметры:
//  УзелОбмена - узел плана обмена, для которого регистрируются изменения
// 
Процедура ЗарегистрироватьИзмененияДанных(УзелОбмена) Экспорт
	
	СоставПланаОбмена = УзелОбмена.Метаданные().Состав;
	Для каждого ЭлементСоставаПланаОбмена Из СоставПланаОбмена Цикл
		
		Если ОбщегоНазначенияСервер.ЭтоДокумент(ЭлементСоставаПланаОбмена.Метаданные) Тогда
			
			ПолноеИмяОбъекта = ЭлементСоставаПланаОбмена.Метаданные.ПолноеИмя();
			Если ПолноеИмяОбъекта = "Документ.Визит" Тогда
				Выборка = ПолучитьВыборкуВизитовДляРегистрации(УзелОбмена);
				
				Пока Выборка.Следующий() Цикл
					
					ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Выборка.Ссылка);
					
				КонецЦикла;
			ИначеЕсли ПолноеИмяОбъекта = "Документ.Мероприятие" Тогда
				Выборка = ПолучитьВыборкуМероприятийДляРегистрации(УзелОбмена);
				
				Пока Выборка.Следующий() Цикл
					
					ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Выборка.Ссылка);
					
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, ЭлементСоставаПланаОбмена.Метаданные);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗарегистрироватьИзмененияДанных()

Функция ПолучитьВыборкуВизитовДляРегистрации(УзелОбмена)
	
	ОтборыДляВыгрузкиДокументов = ПолучитьОтборыДляВыгрузкиДокументов();
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Визиты.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.Визит КАК Визиты
	|ГДЕ
	|	Визиты.Дата >= &ДатаНачалаВыгрузки"
	;
	
	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки", ОтборыДляВыгрузкиДокументов.ДатаНачалаВыгрузки);
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции // ПолучитьВыборкуВизитовДляРегистрации()

Функция ПолучитьВыборкуМероприятийДляРегистрации(УзелОбмена)
	
	ОтборыДляВыгрузкиДокументов = ПолучитьОтборыДляВыгрузкиДокументов();
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Мероприятие.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.Мероприятие КАК Мероприятие
	|ГДЕ
	|	Мероприятие.Дата >= &ДатаНачалаВыгрузки"
	;
	
	Запрос.УстановитьПараметр("ДатаНачалаВыгрузки", ОтборыДляВыгрузкиДокументов.ДатаНачалаВыгрузки);
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции // ПолучитьВыборкуВизитовДляРегистрации()

// Функция получает дату начала загрузки документов по значению константы.
//
Функция ПолучитьДатуНачалаЗагрузкиДокументов() Экспорт
	
	ДатаНачалаЗагрузки = '00010101';
	
	Возврат ДатаНачалаЗагрузки;
	
КонецФункции // ПолучитьДатуНачалаЗагрузкиДокументов()

// Возвращает признак наличия полных прав у пользователя.
//
Функция ЕстьПолныеПрава(Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	КонецЕсли;
	
	Если Пользователь.Роли.Содержит(Метаданные.Роли.ПолныеПрава)
		ИЛИ (Пользователь.Роли.Содержит(Метаданные.Роли.БазовыеПрава)
		И Пользователь.Роли.Содержит(Метаданные.Роли.ЗаказыПросмотрИРедактирование) 
		И Пользователь.Роли.Содержит(Метаданные.Роли.КонтрагентыПросмотрИРедактирование) 
		И Пользователь.Роли.Содержит(Метаданные.Роли.НоменклатураПросмотрИРедактирование) 
		И Пользователь.Роли.Содержит(Метаданные.Роли.ДвиженияДенегПросмотрИРедактирование) 
		И Пользователь.Роли.Содержит(Метаданные.Роли.ДвиженияТоваровПросмотрИРедактирование) 
		И Пользователь.Роли.Содержит(Метаданные.Роли.ПроизводствоПросмотрИРедактирование) 
		И Пользователь.Роли.Содержит(Метаданные.Роли.ОтчетОстаткиТоваровНаСкладахПросмотр) 
		И Пользователь.Роли.Содержит(Метаданные.Роли.ОтчетДвиженияДенегПросмотр) 
		И Пользователь.Роли.Содержит(Метаданные.Роли.ОтчетДолгиПросмотр) 
		И Пользователь.Роли.Содержит(Метаданные.Роли.ОтчетПродажиПросмотр)) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ЕстьПолныеПрава()

// Функция создает объект XDTO
//
Функция СоздатьОбъект(Прокси, ТипОбъекта) Экспорт
	
	Возврат Прокси.ФабрикаXDTO.Создать(Прокси.ФабрикаXDTO.Тип("http://www.prof-it.ru/ma/MobileExchange", ТипОбъекта));
	
КонецФункции // СоздатьОбъект()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура на основании анализа типа данных заменяет их на данные, удаляющие
// информацию из узла в котором их не должно быть
//
// Параметры:
//  Данные	– Объект, набор записей,... который нужно преобразовать
//
Процедура УдалениеДанных(Данные) 
	
	// Получаем объект описания метаданного, соответствующий данным.
	ОбъектМетаданных = ?(ТипЗнч(Данные) = Тип("УдалениеОбъекта"), Данные.Ссылка.Метаданные(), Данные.Метаданные());
	
	// Проверяем тип, интересуют только те типы, которые реализованы на мобильной платформе.
	Если Метаданные.Справочники.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		
		// Перенос удаления объекта для объектных
		Данные = Новый УдалениеОбъекта(Данные.Ссылка);
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных)
		ИЛИ Метаданные.Последовательности.Содержит(ОбъектМетаданных) Тогда
		
		// Очищаем данные
		Данные.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры // УдалениеДанных()

// Получает картинку.
//
Функция ПолучитьКартинку(СсылкаНаОбъект) Экспорт
	
	ДвоичныеДанныеФайла = СсылкаНаОбъект.Картинка.Получить();
	СериализиаторXDTO = Новый СериализаторXDTO(ФабрикаXDTO);
	
	Попытка
		КартинкаXDTO = СериализиаторXDTO.ЗаписатьXDTO(ДвоичныеДанныеФайла);
	Исключение
		КартинкаXDTO = Неопределено;
	КонецПопытки;
	
	Возврат КартинкаXDTO;
	
КонецФункции

// Добавляет в массив документ с проверкой его наличия.
//
Процедура ДобавитьУникальныйДокументВМассив(Документ, Массив) Экспорт
	
	Если Массив.Найти(Документ) = Неопределено Тогда
		Массив.Добавить(Документ);
	КонецЕсли;
	
КонецПроцедуры

// Функция создает новый справочник в информационной базе.
//
Функция СоздатьСправочник(ИмяСправочника, ОбъектXDTO, НужноЗаписыватьОбъект) Экспорт
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.УникальныйИдентификатор);
	Ссылка = Справочники[ИмяСправочника].ПолучитьСсылку(Идентификатор);
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Если ОбъектXDTO.Свойства().Получить("ЭтоГруппа") <> Неопределено
			И ОбъектXDTO.ЭтоГруппа Тогда
			Объект = Справочники[ИмяСправочника].СоздатьГруппу();
		Иначе
			Объект = Справочники[ИмяСправочника].СоздатьЭлемент();
		КонецЕсли;
		Объект.УстановитьСсылкуНового(Ссылка);
		Объект.УстановитьНовыйКод();
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Возврат Объект;
	
КонецФункции // СоздатьСправочник()

// Функция создает новый документ в информационной базе.
//
Функция СоздатьДокумент(ИмяДокумента, ОбъектXDTO, НужноЗаписыватьОбъект) Экспорт
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.УникальныйИдентификатор);
	Ссылка = Документы[ИмяДокумента].ПолучитьСсылку(Идентификатор);
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Документы[ИмяДокумента].СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Возврат Объект;
	
КонецФункции // СоздатьДокумент()

// Процедура записывает справочник в информацилнную базу.
//
Процедура ЗаписатьСправочник(УзелОбмена, Объект, ОбъектXDTO, НужноЗаписыватьОбъект, КоличествоЗаписанных) Экспорт
	
	Если НЕ НужноЗаписыватьОбъект  Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДополнительныеСвойства.Вставить("УзелОбмена", УзелОбмена);
	Объект.ДополнительныеСвойства.Вставить("ЗапретитьПовторныйЗапускОбмена", Истина);
	
	Попытка
		Если ОбъектXDTO.ПометкаУдаления Тогда
			Если Объект.ЭтоНовый() Тогда
				Объект.ОбменДанными.Загрузка = Истина;
				Объект.ПометкаУдаления = Истина;
				Объект.Записать();
			Иначе
				Объект.УстановитьПометкуУдаления(Истина);
			КонецЕсли;
		Иначе
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.Записать();
		КонецЕсли;
	Исключение
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	КоличествоЗаписанных = КоличествоЗаписанных + 1;
	
	ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект);
	
КонецПроцедуры // ЗаписатьДокумент()

// Процедура записывает документ в информацилнную базу.
//
Процедура ЗаписатьДокумент(УзелОбмена, Объект, ОбъектXDTO, НужноЗаписыватьОбъект, КоличествоЗаписанных, ДокументыДляОтложенногоПроведения) Экспорт
	
	Если НЕ НужноЗаписыватьОбъект  Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Номер) Тогда
		Объект.УстановитьНовыйНомер();
	КонецЕсли;
	
	Объект.ДополнительныеСвойства.Вставить("УзелОбмена", УзелОбмена);
	Объект.ДополнительныеСвойства.Вставить("ЗапретитьОперацииСоСвязанымиДокументами", Истина);
	Объект.ДополнительныеСвойства.Вставить("ЗапретитьПовторныйЗапускОбмена", Истина);
	
	Попытка
		Если ОбъектXDTO.ПометкаУдаления Тогда
			Если Объект.ЭтоНовый() Тогда
				Объект.ОбменДанными.Загрузка = Истина;
				Объект.ПометкаУдаления = Истина;
				Объект.Записать(РежимЗаписиДокумента.Запись);
			Иначе
				Объект.ОбменДанными.Загрузка = Истина;
				Объект.Записать(РежимЗаписиДокумента.Запись);
				Объект.ОбменДанными.Загрузка = Ложь;
				Объект.УстановитьПометкуУдаления(Истина);
			КонецЕсли;
		Иначе
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.ПометкаУдаления = Ложь;
			Объект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	Исключение
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если ОбъектXDTO.Проведен Тогда // Для отложенного проведения.
		ДобавитьУникальныйДокументВМассив(Объект.Ссылка, ДокументыДляОтложенногоПроведения);
	КонецЕсли;
	
	КоличествоЗаписанных = КоличествоЗаписанных + 1;
	
	ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект);
	
КонецПроцедуры // ЗаписатьДокумент()

// Получает состояние по строке.
//
Функция ПолучитьСостояниеПоСтроке(СостояниеСтрокой) Экспорт
	
	Если СостояниеСтрокой = "Зарегистрировать уплату" Тогда
		Возврат Перечисления.СостоянияСобытийКалендаря.ЗарегистрироватьУплату;
	ИначеЕсли СостояниеСтрокой = "Получить подтверждение" Тогда
		Возврат Перечисления.СостоянияСобытийКалендаря.ПолучитьПодтверждение;
	ИначеЕсли СостояниеСтрокой = "Все готово!" Тогда
		Возврат Перечисления.СостоянияСобытийКалендаря.Завершено;
	ИначеЕсли СостояниеСтрокой = "Не начато" Тогда
		Возврат Перечисления.СостоянияСобытийКалендаря.НеНачато;
	ИначеЕсли СостояниеСтрокой = "Отчет не сдан" Тогда
		Возврат Перечисления.СостоянияСобытийКалендаря.ОтчетНеСдан;
	Иначе
		Возврат Перечисления.СостоянияСобытийКалендаря[СостояниеСтрокой];
	КонецЕсли;
	
КонецФункции

// Функция помеяает объект на удаление.
//
Процедура ПометитьОбъектНаУдаление(УзелОбмена, ОбъектXDTO) Экспорт
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.УникальныйИдентификатор);
	
	Если ОбъектXDTO.Тип = "Контрагенты" Тогда
		Ссылка = Справочники.Контрагенты.ПолучитьСсылку(Идентификатор);
	ИначеЕсли ОбъектXDTO.Тип = "Товары" Тогда
		Ссылка = Справочники.Товары.ПолучитьСсылку(Идентификатор);
	ИначеЕсли ОбъектXDTO.Тип = "КонтактныеЛица" Тогда
		Ссылка = Справочники.КонтактныеЛица.ПолучитьСсылку(Идентификатор);
	ИначеЕсли ОбъектXDTO.Тип = "Проекты" Тогда
		Ссылка = Справочники.Проекты.ПолучитьСсылку(Идентификатор);
	ИначеЕсли ОбъектXDTO.Тип = "Визиты" Тогда
		Ссылка = Документы.Визит.ПолучитьСсылку(Идентификатор);
	ИначеЕсли ОбъектXDTO.Тип = "СпециализацияВрача" Тогда
		Ссылка = Справочники.СпециализацияВрача.ПолучитьСсылку(Идентификатор);
	КонецЕсли;
	
	Попытка
		Объект = Ссылка.ПолучитьОбъект();
		Объект.УстановитьПометкуУдаления(Истина);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект);
	Исключение
		Возврат;
	КонецПопытки;
	
КонецПроцедуры // ПометитьОбъектНаУдаление()

// Процедура выполняет проведение документов.
//
Процедура ВыполнитьОтложенноеПроведениеДокументов(УзелОбмена, ДокументыДляОтложенногоПроведения) Экспорт
	
	Для каждого ТекДокумент Из ДокументыДляОтложенногоПроведения Цикл
		
		Если ТекДокумент.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		Объект = ТекДокумент.ПолучитьОбъект();
		
		Если Объект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			Объект.ПроверитьЗаполнение();
			Объект.ДополнительныеСвойства.Вставить("ЗапретитьОперацииСоСвязанымиДокументами", Истина);
			Объект.ДополнительныеСвойства.Вставить("ЗапретитьПовторныйЗапускОбмена", Истина);
			Объект.ДополнительныеСвойства.Вставить("НеКонтролироватьОстатки", Истина);
			Объект.Записать(РежимЗаписиДокумента.Проведение);
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект);
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьОтложенноеПроведениеДокументов()

Процедура РегистрацияИзмененийПриЗаписиПриЗаписи(Источник, Отказ) Экспорт

	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЦентральныйУзел = ПланыОбмена.МобильноеПриложение.НайтиПоКоду("001");
	Если НЕ ЦентральныйУзел.Пустая() Тогда
		
		ПараметрыОтбора = ПолучитьОтборыДляВыгрузкиДокументов();
		
		Если ТипЗнч(Источник) = Тип("ДокументОбъект.Визит") Тогда
			Визит = Источник.Ссылка;
			Если Визит.Дата >= ПараметрыОтбора.ДатаНачалаВыгрузки Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(ЦентральныйУзел, Визит);
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(Источник) = Тип("ДокументОбъект.Мероприятие") Тогда
			Мероприятие = Источник.Ссылка;
			Если Мероприятие.Дата >= ПараметрыОтбора.ДатаНачалаВыгрузки Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(ЦентральныйУзел, Мероприятие);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

