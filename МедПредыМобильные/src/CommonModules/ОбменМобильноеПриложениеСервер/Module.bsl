#Область СлужебныйПрограммныйИнтерфейс

// Начинает обмен данными.
//
Функция НачатьОбменДанными() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ОбновитьПовторноИспользуемыеЗначения();
	
	СтруктураОтвета = Новый Структура(
		"ЕстьОшибки, ОбменРазрешен, Прокси, СообщениеОбОшибке, ЦентральныйУзел, КодМобильногоКомпьютера, НаименованиеУстройства, ПериодЗагрузки, ПроверитьОчередьСообщений, ОбменЗавершен, ОбменЗавершенОтправкаДанных, ОбменЗавершенЗагрузкаДанных, НомерСообщенияОбмена, ОбменЗавершен, ИдентификаторЗадания, ОжиданиеСообщенияОбмена",
		Ложь, Ложь, Неопределено, "", ПланыОбмена.МобильноеПриложение.ПустаяСсылка(), "", "", Строка(Перечисления.ПериодыВыгрузкиВМобильноеПриложение.ЗаПоследнийМесяц), Истина, Ложь, Ложь, Ложь, 0, Ложь, "", Ложь
	);
	СообщениеОбОшибке = "";
	
	Прокси = ОбменМобильноеПриложениеПовторноеИспользование.ПолучитьПрокси(СообщениеОбОшибке);
	Если Прокси <> Неопределено Тогда
		СтруктураОтвета.Прокси = Прокси;
		СтруктураОтвета.ОбменРазрешен = Истина;
	Иначе
		СтруктураОтвета.СообщениеОбОшибке = СообщениеОбОшибке;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	СисИнфо = Новый СистемнаяИнформация;
	НаименованиеУстройства = Константы.НаименованиеУстройства.Получить();
	ПериодЗагрузки = Строка(Перечисления.ПериодыВыгрузкиВМобильноеПриложение.ЗаПоследнийМесяц);
	
	Узел = ПланыОбмена.МобильноеПриложение.ЭтотУзел();
	Если ЗначениеЗаполнено(Узел.Код) Тогда
		
		КодМобильногоКомпьютера = Узел.Код;
		
	Иначе
		
		КодМобильногоКомпьютера = Новый УникальныйИдентификатор();
		
		ОбъектУзла = Узел.ПолучитьОбъект();
		ОбъектУзла.Код = КодМобильногоКомпьютера;
		ОбъектУзла.Наименование = НаименованиеУстройства;
		ОбъектУзла.Записать();
		
	КонецЕсли;
	
	ЦентральныйУзел = ПланыОбмена.МобильноеПриложение.НайтиПоКоду("001");
	Если ЦентральныйУзел.Пустая() Тогда
		
		НовыйУзел = ПланыОбмена.МобильноеПриложение.СоздатьУзел();
		НовыйУзел.Код = "001";
		НовыйУзел.Наименование = "Центральный";
		НовыйУзел.Записать();
		ЦентральныйУзел = НовыйУзел.Ссылка;
		
	КонецЕсли;
	
	// Если создан новый узел обмена или счетчики сообщений переинициализированы,
	// перерегистрируем данные.
	Если ЦентральныйУзел.НомерОтправленного = 0 Тогда
		
		ОбменМобильноеПриложениеВызовСервера.ОчиститьОчередьСообщенийОбмена();
		ОбменМобильноеПриложениеВызовСервера.ЗарегистрироватьИзмененияДанных(ЦентральныйУзел)
		
	КонецЕсли;
	
	СтруктураОтвета.ЦентральныйУзел = ЦентральныйУзел;
	СтруктураОтвета.НомерСообщенияОбмена = ЦентральныйУзел.НомерПринятого;
	СтруктураОтвета.КодМобильногоКомпьютера = КодМобильногоКомпьютера;
	СтруктураОтвета.НаименованиеУстройства = НаименованиеУстройства;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СтруктураОтвета;
	
КонецФункции // НачатьОбменДанными()

// Отправляет данные на сервер.
//
Процедура ОтправитьДанные(ПараметрыОбмена) Экспорт
	
	НомерОтправленного = ПараметрыОбмена.ЦентральныйУзел.НомерОтправленного;
	НомерПринятого = ПараметрыОбмена.ЦентральныйУзел.НомерПринятого;
	
	ПакетОбмена = ОбменМобильноеПриложениеВызовСервера.СформироватьПакетОбмена(ПараметрыОбмена.ЦентральныйУзел, ПараметрыОбмена.Прокси);
	ОтправитьПакетОбменаВСервисСИдентификатором(ПакетОбмена, ПараметрыОбмена, НомерОтправленного, НомерПринятого)
	
КонецПроцедуры // ОтправитьДанные()

// Отправляет пакет обмена в сервис с идентификатором пуш уведомлений.
//
Процедура ОтправитьПакетОбменаВСервисСИдентификатором(ПакетОбмена, ПараметрыОбмена, НомерОтправленного, НомерПринятого)
	
	
	Попытка
		ИДПодписчика = Константы.ИДПодписчикаУведомлений.Получить();
		ИДПодписчикаXDTO = СериализаторXDTO.ЗаписатьXDTO(ИДПодписчика);
		
		ДанныеОтвета = ПараметрыОбмена.Прокси.ОтправитьПакетОбменаВСервисСИдентификатором(
			ПакетОбмена,
			ПараметрыОбмена.КодМобильногоКомпьютера,
			ПараметрыОбмена.НаименованиеУстройства,
			НомерОтправленного,
			НомерПринятого,
			ПараметрыОбмена.ПериодЗагрузки,
			Константы.ТекущаяВерсияПриложения.Получить(),
			ИДПодписчикаXDTO
		);
		
		СтруктураОтвета = ДанныеОтвета.Получить();
		ПараметрыОбмена.ИдентификаторЗадания = СтруктураОтвета.ИдентификаторЗадания;
		Если СтруктураОтвета.НовыйОбмен Тогда
			ОбменМобильноеПриложениеВызовСервера.ОчиститьОчередьСообщенийОбмена();
		КонецЕсли;
		
		ПланыОбмена.УдалитьРегистрациюИзменений(ПараметрыОбмена.ЦентральныйУзел, ПараметрыОбмена.ЦентральныйУзел.НомерОтправленного);
		
		Если СтруктураОтвета.Свойство("НужнаИнициализацияУзла") Тогда
			ИнициализироватьУзел();
		КонецЕсли;
		
		ПараметрыОбмена.ОбменЗавершенОтправкаДанных = Истина;
	Исключение
		Инфо = ИнформацияОбОшибке();
		ПолноеОписание = Инфо.Описание;
		Пока Инфо.Причина <> Неопределено Цикл
			Инфо = Инфо.Причина;
			ПолноеОписание = ПолноеОписание + " - " + Инфо.Описание;
		КонецЦикла;
		Описание = Инфо.Описание;
		Если Найти(Описание, "нет прав на синхронизацию данных с мобильным приложением") Тогда
			СообщениеОбОшибке = НСтр("ru='У пользователя нет прав на синхронизацию данных с мобильным приложением.';en='The user does not have rights to the data synchronization with a mobile application. In the central database.'");
			РезервноеКопирование.ОчиститьБазу();
		ИначеЕсли Найти(Описание, "Устройству запрещена синхронизация с центральной базой.") Тогда
			СообщениеОбОшибке = НСтр("ru='Данному устройству запрещена синхронизация данных с мобильным приложением.';en='This device does not have rights to the data synchronization with a mobile application. In the central database.'");
			РезервноеКопирование.ОчиститьБазу();
		ИначеЕсли Найти(Описание, "Для синхронизации с центральной базой обновите приложение до версии не ниже") Тогда
			НачалоВерсии = Найти(Описание, "|")+1;
			ДлинаВерсии = Найти(Описание, "~")-НачалоВерсии; 
			СообщениеОбОшибке = СтрШаблон(НСтр("ru='Для синхронизации с центральной базой обновите приложение до версии не ниже %1';en='Update application to version %1 to have rights to the data synchronization with a mobile application. In the central database.'"), 
									Сред(Описание, НачалоВерсии, ДлинаВерсии));
		ИначеЕсли Найти(Описание, "Метод объекта не обнаружен") Тогда
			ОтправитьПакетОбменаВСервис(СообщениеОбОшибке, ПакетОбмена, НомерОтправленного, НомерПринятого); // Поддержка старых версий мобильного УНФ.
			Возврат;
		Иначе
			СообщениеОбОшибке = ПолноеОписание;
		КонецЕсли;
		ПараметрыОбмена.ОбменЗавершенОтправкаДанных = Ложь;
		ПараметрыОбмена.ЕстьОшибки = Истина;
	КонецПопытки;
	
КонецПроцедуры

// Отправляет пакет обмена в сервис.
//
Процедура ОтправитьПакетОбменаВСервис(ПакетОбмена, ПараметрыОбмена, НомерОтправленного, НомерПринятого)
	
	Попытка
		ДанныеОтвета = ПараметрыОбмена.Прокси.ОтправитьПакетОбменаВСервис(
			ПакетОбмена,
			ПараметрыОбмена.КодМобильногоКомпьютера,
			ПараметрыОбмена.НаименованиеУстройства,
			НомерОтправленного,
			НомерПринятого,
			ПараметрыОбмена.ПериодЗагрузки,
			Константы.ТекущаяВерсияПриложения.Получить()
		);
		
		СтруктураОтвета = ДанныеОтвета.Получить();
		ПараметрыОбмена.ИдентификаторЗадания = СтруктураОтвета.ИдентификаторЗадания;
		Если СтруктураОтвета.НовыйОбмен Тогда
			ОбменМобильноеПриложениеВызовСервера.ОчиститьОчередьСообщенийОбмена();
		КонецЕсли;
		
		ПланыОбмена.УдалитьРегистрациюИзменений(ПараметрыОбмена.ЦентральныйУзел, ПараметрыОбмена.ЦентральныйУзел.НомерОтправленного);
		ПараметрыОбмена.ОбменЗавершенОтправкаДанных = Истина;
	Исключение
		Инфо = ИнформацияОбОшибке();
		ПолноеОписание = Инфо.Описание;
		Пока Инфо.Причина <> Неопределено Цикл
			Инфо = Инфо.Причина;
			ПолноеОписание = ПолноеОписание + " - " + Инфо.Описание;
		КонецЦикла;
		Описание = Инфо.Описание;
		Если Найти(Описание, "нет прав на синхронизацию данных с мобильным приложением") Тогда
			ПараметрыОбмена.СообщениеОбОшибке = НСтр("ru='У пользователя нет прав на синхронизацию данных с мобильным приложением.
			|В центральной базе необходимо включить профили прав доступа ""Продажи"", ""Закупки"" и ""Деньги"".';en='The user does not have rights to the data synchronization with a mobile application. In the central database, you must include profiles of ""Sales"", ""Procurement"" and ""Money"".'");
		Иначе
			ПараметрыОбмена.СообщениеОбОшибке = ПолноеОписание;
		КонецЕсли;
		ПараметрыОбмена.ОбменЗавершенОтправкаДанных = Ложь;
		ПараметрыОбмена.ЕстьОшибки = Истина;
	КонецПопытки;
	
КонецПроцедуры

// Получает данные обмена.
//
Функция ПолучитьДанныеОбмена(ПараметрыОбмена)
	
	Попытка
		ДанныеОбмена = ПараметрыОбмена.Прокси.ПолучитьПакетОбмена(
			ПараметрыОбмена.КодМобильногоКомпьютера,
			ПараметрыОбмена.НомерСообщенияОбмена,
			ПараметрыОбмена.ИдентификаторЗадания
		);
		СтруктураОтвета = ДанныеОбмена.Получить();
	Исключение
		Инфо = ИнформацияОбОшибке();
		Описание = Инфо.Причина.Описание;
		ПараметрыОбмена.СообщениеОбОшибке = Описание;
		ПараметрыОбмена.ЕстьОшибки = Истина;
	КонецПопытки;
	
	Возврат СтруктураОтвета;
	
КонецФункции // ПолучитьДанныеОбмена()

// Обрабатывает данные обмена.
//
Процедура ПолучитьДанные(ПараметрыОбмена) Экспорт
	
	Если НЕ ПараметрыОбмена.ОжиданиеСообщенияОбмена Тогда
		ПараметрыОбмена.НомерСообщенияОбмена = ПолучитьНомерСообщенияОбмена(ПараметрыОбмена);
	КонецЕсли;
	
	СтруктураОтвета = ПолучитьДанныеОбмена(ПараметрыОбмена);
	Если ПараметрыОбмена.ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОтвета.ПрерватьЗагрузку Тогда
		ПараметрыОбмена.ЕстьОшибки = Истина;
		ПрерватьВыполнениеЗагрузки(ПараметрыОбмена.СообщениеОбОшибке);
		Возврат;
	КонецЕсли;
	
	// Если сообщения в центральной базе еще формируются, подключаем обработчик ожидания
	ПараметрыОбмена.ОжиданиеСообщенияОбмена = СтруктураОтвета.Подождать;
	Если ПараметрыОбмена.ОжиданиеСообщенияОбмена Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОтвета.ПродолжитьЗагрузку Тогда
		
		ОбменМобильноеПриложениеВызовСервера.ДобавитьСообщениеВОчередьСообщенийОбмена(ПараметрыОбмена.НомерСообщенияОбмена, СтруктураОтвета.СообщениеОбмена);
		
		ПараметрыОбмена.НомерСообщенияОбмена = ПолучитьНомерСообщенияОбмена(ПараметрыОбмена);
		Пока СтруктураОтвета.ПродолжитьЗагрузку Цикл
			
			СтруктураОтвета = ПолучитьДанныеОбмена(ПараметрыОбмена);
			Если ПараметрыОбмена.ЕстьОшибки  Тогда
				Возврат;
			КонецЕсли;
			
			Если СтруктураОтвета.ПрерватьЗагрузку Тогда
				ПрерватьВыполнениеЗагрузки(ПараметрыОбмена.СообщениеОбОшибке);
				ПараметрыОбмена.ЕстьОшибки = Истина;
				Возврат;
			КонецЕсли;
			
			ПараметрыОбмена.ОжиданиеСообщенияОбмена = СтруктураОтвета.Подождать;
			Если ПараметрыОбмена.ОжиданиеСообщенияОбмена  Тогда
				Возврат;
			КонецЕсли;
			
			Если СтруктураОтвета.ПродолжитьЗагрузку Тогда
				ОбменМобильноеПриложениеВызовСервера.ДобавитьСообщениеВОчередьСообщенийОбмена(ПараметрыОбмена.НомерСообщенияОбмена, СтруктураОтвета.СообщениеОбмена);
				ПараметрыОбмена.НомерСообщенияОбмена = ПолучитьНомерСообщенияОбмена(ПараметрыОбмена);
			Иначе
				ПараметрыОбмена.ОбменЗавершенЗагрузкаДанных = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ПараметрыОбмена.ОбменЗавершенЗагрузкаДанных = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьДанные()

// Загружает данные обмена.
//
Процедура ЗагрузитьДанные(ПараметрыОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	ОбменМобильноеПриложениеВызовСервера.ПроверитьОчередьСообщенийОбмена(
		ПараметрыОбмена.ЕстьОшибки,
		ПараметрыОбмена.СообщениеОбОшибке,
		ПараметрыОбмена.ЦентральныйУзел.НомерПринятого
	);
	
	Если ПараметрыОбмена.ЕстьОшибки Тогда
		ПрерватьВыполнениеЗагрузки(ПараметрыОбмена.СообщениеОбОшибке);
		Возврат;
	КонецЕсли;
	
	КоличествоЗаписанных = 0;
	ПерезапуститьПриложение = Ложь;
	
	ОбменМобильноеПриложениеВызовСервера.ПринятьПакетыОбмена(
		ПараметрыОбмена.ЦентральныйУзел,
		ПараметрыОбмена.Прокси,
		КоличествоЗаписанных,
		ПараметрыОбмена.ЕстьОшибки,
		ПараметрыОбмена.СообщениеОбОшибке,
		ПерезапуститьПриложение
	);
	
	Если ПерезапуститьПриложение Тогда
		Константы.ПерезапуститьПриложение.Установить(Истина);
	КонецЕсли;
		
	ОбменМобильноеПриложениеВызовСервера.ОчиститьОчередьСообщенийОбмена();
	Если ПараметрыОбмена.ЕстьОшибки Тогда
		ПрерватьВыполнениеЗагрузки(ПараметрыОбмена.СообщениеОбОшибке);
		Возврат;
	КонецЕсли;
	
	ПараметрыОбмена.ОбменЗавершен = Истина;
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры // ЗагрузитьДанные()

// Возвращает признак синхронизации данных.
//
Функция ИспользоватьСинхронизациюДанных() Экспорт
	
	Возврат Константы.ИспользоватьСинхронизациюДанных.Получить();
	
КонецФункции // ИспользоватьСинхронизациюДанных()

// Отправляет информацию о звонке на сервер.
//
Процедура ОтправитьИнформациюОЗвонкеНаСервер(НомерТелефона, Дата, ВариантСобытия, ТипЗвонка) Экспорт
	
	СообщениеОбОшибке = "";
	Прокси = ОбменМобильноеПриложениеПовторноеИспользование.ПолучитьПрокси(СообщениеОбОшибке);
		
	
	Если Прокси = Неопределено Тогда
		Сообщить(СообщениеОбОшибке);
	Иначе
		Прокси.УведомитьОЗвонке(НомерТелефона, Дата, ВариантСобытия, Строка(ТипЗвонка));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьНомерСообщенияОбмена(ПараметрыОбмена)
	
	ПараметрыОбмена.НомерСообщенияОбмена = ПараметрыОбмена.НомерСообщенияОбмена + 1;
	
	// Получаем номер ближайшего недостающего сообщения очереди или номер сообщения,
	// следующего за максимальным.
	Если ПараметрыОбмена.ПроверитьОчередьСообщений Тогда
		
		ВыборкаСообщенийОбмена = РегистрыСведений.ОчередьСообщенийОбмена.Выбрать(, "НомерСообщения Возр");
		Пока ВыборкаСообщенийОбмена.Следующий() Цикл
			
			Если ВыборкаСообщенийОбмена.НомерСообщения < ПараметрыОбмена.НомерСообщенияОбмена Тогда
				Продолжить;
			ИначеЕсли ВыборкаСообщенийОбмена.НомерСообщения > ПараметрыОбмена.НомерСообщенияОбмена Тогда
				Возврат ПараметрыОбмена.НомерСообщенияОбмена;
			КонецЕсли;
			
			ПараметрыОбмена.НомерСообщенияОбмена = ПараметрыОбмена.НомерСообщенияОбмена + 1;
			
		КонецЦикла;
		
		ПараметрыОбмена.ПроверитьОчередьСообщений = Ложь;
	КонецЕсли;

	Возврат ПараметрыОбмена.НомерСообщенияОбмена;
	
КонецФункции // ПолучитьНомерСообщенияОбмена()

Процедура ПрерватьВыполнениеЗагрузки(СообщениеОбОшибке)
	
	ОбменМобильноеПриложениеВызовСервера.ОчиститьОчередьСообщенийОбмена();
	
КонецПроцедуры // ПрерватьВыполнениеЗагрузки()

Процедура ИнициализироватьУзел() Экспорт
	ЦентральныйУзел = ПланыОбмена.МобильноеПриложение.НайтиПоКоду("001");
	Если НЕ ЦентральныйУзел.Пустая() Тогда
		
		НовыйУзел = ЦентральныйУзел.ПолучитьОбъект();
		НовыйУзел.Код = "001";
		НовыйУзел.Наименование = "Центральный";
		НовыйУзел.НомерОтправленного = 0;
		НовыйУзел.Записать();
		
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти
