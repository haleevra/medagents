#Область СлужебныйПрограммныйИнтерфейс

// Заполняет список выбора контрагента.
//
Процедура ЗаполнитьСписокВыбораИзКонтактнойКниги(
	Текст,
	ДанныеВыбора,
	СтандартнаяОбработка,
	КэшНайденныхКонтактов,
	ДобавитьКонтрагентовИзБД) Экспорт
	
	#Если МобильноеПриложениеКлиент Тогда
		
		//ИспользоватьСинхронизациюСКонтактнойКнигой = ОбщегоНазначенияВызовСервера.ПолучитьЗначениеКонстанты("ИспользоватьСинхронизациюСКонтактнойКнигой");
		ИспользоватьСинхронизациюСКонтактнойКнигой = Истина;
		
		Если НЕ ИспользоватьСинхронизациюСКонтактнойКнигой Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеВыбора = Новый СписокЗначений;
		
		Если ДобавитьКонтрагентовИзБД Тогда
			МассивСсылок = МенеджерКонтактовСервер.ПолучитьМассивДанныхВыбораСправочника(Текст);
			ДанныеВыбора.ЗагрузитьЗначения(МассивСсылок);
		КонецЕсли;
		
		Если СтрДлина(Текст) < 3 Тогда
			Возврат;
		КонецЕсли;
		
		Если СтрДлина(Текст) = 3
			ИЛИ КэшНайденныхКонтактов = Неопределено Тогда
			
			КонтактыИзТелефоннойКниги = Новый СписокЗначений;
			
			Отбор = ОтборДляПоискаКонтактов();
			ЭлементыОтбора = Отбор.Элементы[0].Элементы;
			ЭлементыОтбора[0].ПравоеЗначение = ТРег(Текст);
			ЭлементыОтбора[1].ПравоеЗначение = ТРег(Текст);
			ЭлементыОтбора[2].ПравоеЗначение = ТРег(Текст);
			ЭлементыОтбора[3].ПравоеЗначение = ТРег(Текст);
			
			Попытка
				МенеджерКонтактов = Новый МенеджерКонтактов();
				МассивКонтактов = МенеджерКонтактов.НайтиКонтакты(Отбор);
				
				Для каждого ЛокальныйКлюч Из МассивКонтактов Цикл
					Данные = МенеджерКонтактов.ПолучитьКонтакт(ЛокальныйКлюч).ДанныеКонтакта;
					ТолькоФИО = 
					Строка(?(Лев(Данные.Имя, 3) = ТРег(Текст), 1, 2)) + 
					Данные.Имя +
					?(ЗначениеЗаполнено(Данные.Отчество), " " + Данные.Отчество, "") +
					?(ЗначениеЗаполнено(Данные.Фамилия), " " + Данные.Фамилия, "");
					КонтактыИзТелефоннойКниги.Добавить(Данные, ТолькоФИО);
				КонецЦикла;
				
				КонтактыИзТелефоннойКниги.СортироватьПоПредставлению();
				
				ТолькоФИОПредыдущее = "";
				
				Для каждого Элемент Из КонтактыИзТелефоннойКниги Цикл
					КоличествоВСписке = ДанныеВыбора.Количество();
					Данные = Элемент.Значение;
					
					ТолькоФИО = Сред(Элемент.Представление, 2);
					Представление = ТолькоФИО + ?(ЗначениеЗаполнено(Данные.Организация)," (" + Данные.Организация + ")", "");
					
					Если КоличествоВСписке > 0 И ТолькоФИОПредыдущее = ТолькоФИО Тогда
						ДанныеВыбора[КоличествоВСписке - 1].Значение.Добавить(Данные);
						ДанныеВыбора[КоличествоВСписке - 1].Представление = 
						?(СтрДлина(ДанныеВыбора[КоличествоВСписке - 1].Представление) < СтрДлина(Представление),
						Представление,
						ДанныеВыбора[КоличествоВСписке - 1].Представление
						);
					Иначе
						Массив = Новый Массив;
						Массив.Добавить(Данные);
						ДанныеВыбора.Добавить(Массив, Представление, , БиблиотекаКартинок.Добавить);
					КонецЕсли;
					ТолькоФИОПредыдущее = ТолькоФИО;
				КонецЦикла;
			Исключение
			КонецПопытки;
			
			СписокПоискаКонтактовУстройства = ДанныеВыбора;
		Иначе
			Для каждого Элемент Из СписокПоискаКонтактовУстройства Цикл
				Если Найти(Нрег(Элемент.Представление), Нрег(Текст)) > 0 Тогда
					ДанныеВыбора.Добавить(Элемент.Значение, ?(ОбщегоНазначенияВызовСервера.ВерсияОС() = "iOS", "+", "") + Элемент.Представление, , ?(ТипЗнч(Элемент.Значение) = Тип("Массив"), БиблиотекаКартинок.Добавить, Неопределено));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СтандартнаяОбработка = ДанныеВыбора.Количество() = 0;
		
	#КонецЕсли
	
КонецПроцедуры

// Обрабатывает выбор контрагента.
//
Процедура ОбработкаВыбора(
	Элемент,
	ВыбранноеЗначение,
	СтандартнаяОбработка,
	Форма,
	КэшНайденныхКонтактов) Экспорт
	
	#Если МобильноеПриложениеКлиент Тогда
		
		//ИспользоватьСинхронизациюСКонтактнойКнигой = ОбщегоНазначенияВызовСервера.ПолучитьЗначениеКонстанты("ИспользоватьСинхронизациюСКонтактнойКнигой");
		ИспользоватьСинхронизациюСКонтактнойКнигой = Истина;
		
		Если НЕ ИспользоватьСинхронизациюСКонтактнойКнигой Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
			СтандартнаяОбработка = Ложь;
			
			ИмяКонтакта = СокрЛП(ВыбранноеЗначение[0].Имя 
			+ ?(ЗначениеЗаполнено(ВыбранноеЗначение[0].Отчество), " "
			+ ВыбранноеЗначение[0].Отчество, "")
			+ ?(ЗначениеЗаполнено(ВыбранноеЗначение[0].Фамилия), " "
			+ ВыбранноеЗначение[0].Фамилия,""));
			
			Ответ = Вопрос("", РежимДиалогаВопрос.ДаНет,,, НСтр("ru='Добавить из адресной книги ';en='Add from address book '") + ИмяКонтакта + "?");
			
			Если Ответ = КодВозвратаДиалога.Да Тогда
				НовыйКонтрагент = МенеджерКонтактовСервер.ДобавитьКонтрагента(ВыбранноеЗначение);
				Оповестить("СозданНовыйКонтрагент", НовыйКонтрагент, Форма);
			КонецЕсли;
			
		КонецЕсли;
		
		КэшНайденныхКонтактов = Неопределено;
	#КонецЕсли
	
КонецПроцедуры

// Прочеряет корректность адреса электронной почты.
//
Функция ЭтоКорректныйEmail(Email)Экспорт
	
	Email = СокрЛП(Email);
	
	НомерСимволаСобаки = Найти(Email, "@");
	ТекстПослеСобаки = Сред(Email, НомерСимволаСобаки + 1);
	Если НомерСимволаСобаки <= 1 
		ИЛИ НомерСимволаСобаки > СтрДлина(Email) - 4 
		ИЛИ Найти(ТекстПослеСобаки, "@") > 0 
		ИЛИ Найти(ТекстПослеСобаки, ".") = 0
		ИЛИ Найти(Прав(ТекстПослеСобаки,2), ".") > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Заполняет реквизиты контрагента.
//
Процедура ЗаполнитьРеквизитыКонтрагента(Контрагент, ВыбранноеЗначение) Экспорт
	
	Контрагент.Наименование = ВыбранноеЗначение[0].Имя +
	?(ЗначениеЗаполнено(ВыбранноеЗначение[0].Отчество), " " + ВыбранноеЗначение[0].Отчество, "") +
	?(ЗначениеЗаполнено(ВыбранноеЗначение[0].Фамилия)," "+ ВыбранноеЗначение[0].Фамилия,"") +
	?(ЗначениеЗаполнено(ВыбранноеЗначение[0].Организация)," (" + ВыбранноеЗначение[0].Организация + ")", "");
	
	Для каждого ДанныеКонтакта из ВыбранноеЗначение Цикл
		
		Сч = 0;
		Для каждого ЭлементДанных Из ДанныеКонтакта.НомераТелефонов Цикл
			Сч = Сч + 1;
			Если Сч = 1 Тогда
				Контрагент.НомерТелефона = ЭлементДанных.Значение;
			Иначе
				Контрагент.Комментарий = Контрагент.Комментарй + НСтр("ru='доп. тел: ';en='tel: '") + ЭлементДанных.Значение + Символы.ПС;
			КонецЕсли;
		КонецЦикла;
		
		Сч = 0;
		Для каждого ЭлементДанных Из ДанныеКонтакта.Адреса Цикл
			Сч = Сч + 1;
			Если Сч = 1 Тогда
				Контрагент.Адрес = ЭлементДанных.Значение;
			Иначе
				Контрагент.Комментарий = Контрагент.Комментарй + НСтр("ru='доп. адрес: ';en='adress: '") + ЭлементДанных.Значение + Символы.ПС;
			КонецЕсли;
		КонецЦикла;
		
		Сч = 0;
		Для каждого ЭлементДанных Из ДанныеКонтакта.АдресаЭлектроннойПочты Цикл
			Сч = Сч + 1;
			Если Сч = 1 Тогда
				Контрагент.АдресЭП = ЭлементДанных.Значение;
			Иначе
				Контрагент.Комментарий = Контрагент.Комментарй + НСтр("ru='доп. email: ';en='email: '") + ЭлементДанных.Значение + Символы.ПС;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ЭлементДанных из ДанныеКонтакта.ВебАдреса Цикл
			Контрагент.Комментарий = Контрагент.Комментарй + "WEB: " + ЭлементДанных.Значение + Символы.ПС;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОтборДляПоискаКонтактов()
	
	Отбор = Новый ОтборКомпоновкиДанных;
	
	ГруппаОтбора = Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДанныеКонтакта.Имя");
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДанныеКонтакта.Фамилия");
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДанныеКонтакта.Отчество");
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДанныеКонтакта.Организация");
	
	Возврат Отбор;
	
КонецФункции

#КонецОбласти
