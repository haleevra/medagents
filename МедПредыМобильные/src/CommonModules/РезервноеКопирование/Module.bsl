#Область СлужебныйПрограммныйИнтерфейс

// Идентифицирует ошибку.
//
&НаСервере
Функция ИдентификацияОшибки(ИнформацияОбОшибке) Экспорт 
	
	ТипОшибки = Неопределено;
	
	Пока ИнформацияОбОшибке <> Неопределено Цикл 
		
		Если Найти(ИнформацияОбОшибке.Описание, "аутентификац") <> 0 Тогда 
			ТипОшибки = Перечисления.РезервноеКопированиеПодключениеКСерверу.ОшибкаАутентификации;
			Возврат ТипОшибки;
		ИначеЕсли Найти(ИнформацияОбОшибке.Описание, "404") <> 0
			Или Найти(ИнформацияОбОшибке.Описание, "RETR failed") <> 0 Тогда 
			ТипОшибки = Перечисления.РезервноеКопированиеПодключениеКСерверу.ФайлНеНайден;
			Возврат ТипОшибки;
		ИначеЕсли Найти(ИнформацияОбОшибке.Описание, "409") <> 0 Тогда 
			ТипОшибки = Перечисления.РезервноеКопированиеПодключениеКСерверу.НеверныйПуть;
		КонецЕсли;
		
		ИнформацияОбОшибке = ИнформацияОбОшибке.Причина;
		
	КонецЦикла;
	
	Возврат ТипОшибки;
	
КонецФункции // ИдентификацияОшибки()

// Получает описание ошибки.
//
&НаСервере
Функция ПолучитьОписаниеОшибки(ТипОшибки) Экспорт 
	
	Если ТипОшибки = Перечисления.РезервноеКопированиеПодключениеКСерверу.ОшибкаАутентификации Тогда 
		ОписаниеОшибки = НСтр("ru='Неверно указан логин или пароль. Проверьте введенные данные.';en='Incorrect login or password. Check the data.'");
	ИначеЕсли ТипОшибки = Перечисления.РезервноеКопированиеПодключениеКСерверу.НеверныйПуть Тогда 
		ОписаниеОшибки = НСтр("ru='Указана несуществующая папка. Проверьте введенные данные.';en='Specify a non-existent folder. Check the data.'");
	ИначеЕсли ТипОшибки = Неопределено Тогда
		ОписаниеОшибки = НСтр("ru='Что-то пошло не так. Неизвестная ошибка.';en='Something has gone wrong. An unknown error occurred.'");
	КонецЕсли;
	Возврат ОписаниеОшибки;
	
КонецФункции // ПолучитьОписаниеОшибки()

// Выгружает базу.
//
&НаСервере
Функция ВыгрузитьБазу() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура("ЕстьОшибки, Описание", Ложь, "");
	
	СтруктураПодключения = УстановитьСтрокуПодключения();
	
	ФайлИнформацииОВыгрузкахЛокальный = ПолучитьИмяВременногоФайла(".xml");
	Попытка
		КопироватьФайл(СтруктураПодключения.ФайлИнформацииОВыгрузках, ФайлИнформацииОВыгрузкахЛокальный);
	Исключение
		ТипОшибки = РезервноеКопирование.ИдентификацияОшибки(ИнформацияОбОшибке());
		
		Если ТипОшибки <> Перечисления.РезервноеКопированиеПодключениеКСерверу.ФайлНеНайден Тогда 
			Результат.ЕстьОшибки = Истина;
			Результат.Описание = РезервноеКопирование.ПолучитьОписаниеОшибки(ТипОшибки);
			Возврат Результат;
		КонецЕсли;
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ФайлИнформацииОВыгрузкахЛокальный);
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписьXML.ЗаписатьНачалоЭлемента("applications");
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.Закрыть();
	КонецПопытки;
	
	ИмяВыгружаемойБазы = СтруктураПодключения.НаименованиеПриложения + "_" + Метаданные.Версия + "_informationBase_" + СтрЗаменить(Формат(ТекущаяДата(), "ДЛФ=Д"), "/", ".");
	
	КоличествоСовпаденийИмен = 0;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлИнформацииОВыгрузкахЛокальный);
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	СтрокаXPath = "/applications/application[@name='" + СтруктураПодключения.НаименованиеПриложения + "' and @version='" + Метаданные.Версия + "']/InformationBase";
	
	ВыражениеXPath = ДокументDOM.СоздатьВыражениеXPath(СтрокаXPath, Новый РазыменовательПространствИменDOM(ДокументDOM));
	РезультатXPath = ВыражениеXPath.Вычислить(ДокументDOM);
	
	НетЭлементов = Истина;
	ИнформационнаяБаза = РезультатXPath.ПолучитьСледующий();
	Пока ИнформационнаяБаза <> Неопределено Цикл 
		НетЭлементов = Ложь;
		
		Если Найти(ИнформационнаяБаза.Атрибуты.ПолучитьИменованныйЭлемент("name").Значение, ИмяВыгружаемойБазы) <> 0 Тогда 
			КоличествоСовпаденийИмен = КоличествоСовпаденийИмен + 1;
		КонецЕсли;
		ИнформационнаяБаза = РезультатXPath.ПолучитьСледующий();
	КонецЦикла;
	
	Если КоличествоСовпаденийИмен <> 0 Тогда
		ИмяВыгружаемойБазы = ИмяВыгружаемойБазы + " (" + КоличествоСовпаденийИмен + ")";
	КонецЕсли;
	
	НовыйФайлИнформацииОВыгрузках = ПолучитьИмяВременногоФайла(".xml");
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(НовыйФайлИнформацииОВыгрузках);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлИнформацииОВыгрузкахЛокальный);
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента(ЧтениеXML.Имя);
			Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
				ЗаписьXML.ЗаписатьАтрибут(ЧтениеXML.Имя, ЧтениеXML.Значение);
			КонецЦикла;
		КонецЕсли;
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			
			Элемент = ЧтениеXML.Имя;
			
			Если Элемент = "application"
				И ЧтениеXML.ПолучитьАтрибут("name") = СтруктураПодключения.НаименованиеПриложения
				И ЧтениеXML.ПолучитьАтрибут("version") = Метаданные.Версия Тогда
				
				Схема = ЭкспортXMLСхемыКонфигурации();
				ИмяВыгружаемойСхемы = СтрЗаменить(ИмяВыгружаемойБазы, "_informationBase_", "_schema_");
				Попытка
					КопироватьФайл(Схема, СтруктураПодключения.СтрокаПодключения + ИмяВыгружаемойСхемы + ".xsd");
				Исключение
					ТипОшибки = РезервноеКопирование.ИдентификацияОшибки(ИнформацияОбОшибке());
					Результат.ЕстьОшибки = Истина;
					Результат.Описание = РезервноеКопирование.ПолучитьОписаниеОшибки(ТипОшибки);
					Возврат Результат;
				КонецПопытки;
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("InformationBase");
				ЗаписьXML.ЗаписатьАтрибут("name", ИмяВыгружаемойБазы);
				ЗаписьXML.ЗаписатьАтрибут("schema", ИмяВыгружаемойСхемы);
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
			
			Если Элемент = "applications" И НетЭлементов Тогда
				
				Схема = ЭкспортXMLСхемыКонфигурации();
				ИмяВыгружаемойСхемы = СтрЗаменить(ИмяВыгружаемойБазы, "_informationBase_", "_schema_");
				Попытка
					КопироватьФайл(Схема, СтруктураПодключения.СтрокаПодключения + ИмяВыгружаемойСхемы + ".xsd");
				Исключение
					ТипОшибки = РезервноеКопирование.ИдентификацияОшибки(ИнформацияОбОшибке());
					Результат.ЕстьОшибки = Истина;
					Результат.Описание = РезервноеКопирование.ПолучитьОписаниеОшибки(ТипОшибки);
					Возврат Результат;
				КонецПопытки;
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("application");
				ЗаписьXML.ЗаписатьАтрибут("name", СтруктураПодключения.НаименованиеПриложения);
				ЗаписьXML.ЗаписатьАтрибут("version", Метаданные.Версия);
				ЗаписьXML.ЗаписатьНачалоЭлемента("InformationBase");
				ЗаписьXML.ЗаписатьАтрибут("name", ИмяВыгружаемойБазы);
				ЗаписьXML.ЗаписатьАтрибут("schema", ИмяВыгружаемойСхемы);
				
				ЗаписьXML.ЗаписатьКонецЭлемента();
				ЗаписьXML.ЗаписатьКонецЭлемента();
				НетЭлементов = Ложь;
			КонецЕсли;
			
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	ЗаписьXML.Закрыть();
	
	Попытка
		КопироватьФайл(НовыйФайлИнформацииОВыгрузках, СтруктураПодключения.ФайлИнформацииОВыгрузках);
	Исключение
		ТипОшибки = РезервноеКопирование.ИдентификацияОшибки(ИнформацияОбОшибке());
		Результат.ЕстьОшибки = Истина;
		Результат.Описание = РезервноеКопирование.ПолучитьОписаниеОшибки(ТипОшибки);
		Возврат Результат;
	КонецПопытки;
	
	ВыгрузкаБазы = ВыгрузитьБазуВXML();
	
	Попытка
		КопироватьФайл(ВыгрузкаБазы, СтруктураПодключения.СтрокаПодключения + ИмяВыгружаемойБазы + ".xml");
	Исключение
		ТипОшибки = РезервноеКопирование.ИдентификацияОшибки(ИнформацияОбОшибке());
		Результат.ЕстьОшибки = Истина;
		Результат.Описание = РезервноеКопирование.ПолучитьОписаниеОшибки(ТипОшибки);
		Возврат Результат;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Загружает базу.
//
&НаСервере
Функция ЗагрузитьБазу() Экспорт
	
	Результат = Новый Структура("ЕстьОшибки, Описание, АдресВыгруженныеБазы, СтрокаПодключения", Ложь, "", Неопределено, "");

	СтруктураПодключения = УстановитьСтрокуПодключения();
	
	ФайлИнформацииОВыгрузкахЛокальный = ПолучитьИмяВременногоФайла(".xml");
	
	Попытка
		КопироватьФайл(СтруктураПодключения.ФайлИнформацииОВыгрузках, ФайлИнформацииОВыгрузкахЛокальный);
	Исключение
		Результат.ЕстьОшибки = Истина;
		Ошибка = ИнформацияОбОшибке();
		ТипОшибки = РезервноеКопирование.ИдентификацияОшибки(Ошибка);
		Если ТипОшибки = Перечисления.РезервноеКопированиеПодключениеКСерверу.ФайлНеНайден Тогда 
			Сообщение = НСтр("ru='Резервные копии отсутствуют или указана несуществующая папка.';en='Backup are absent or are non-existent folder.'");
			Результат.Описание = Сообщение;
		Иначе
			Результат.Описание = РезервноеКопирование.ПолучитьОписаниеОшибки(ТипОшибки);
		КонецЕсли;
		Возврат Результат;
	КонецПопытки;
	
	ВыгруженныеБазы = Новый ТаблицаЗначений();
	ВыгруженныеБазы.Колонки.Добавить("ИмяФайла", Новый ОписаниеТипов("Строка"));
	ВыгруженныеБазы.Колонки.Добавить("ВерсияПриложения", Новый ОписаниеТипов("Строка"));
	ВыгруженныеБазы.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	ВыгруженныеБазы.Колонки.Добавить("СхемаКонфигурации", Новый ОписаниеТипов("Строка"));

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлИнформацииОВыгрузкахЛокальный);
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	СтрокаXPath = "/applications/application[@name='" + СтруктураПодключения.НаименованиеПриложения + "']/InformationBase";
	
	ВыражениеXPath = ДокументDOM.СоздатьВыражениеXPath(СтрокаXPath, Новый РазыменовательПространствИменDOM(ДокументDOM));
	РезультатXPath = ВыражениеXPath.Вычислить(ДокументDOM);
	
	ИнформационнаяБаза = РезультатXPath.ПолучитьСледующий();
	Пока ИнформационнаяБаза <> Неопределено Цикл 
		
		ИмяФайла = ИнформационнаяБаза.Атрибуты.ПолучитьИменованныйЭлемент("name").Значение;
		АтрибутСхема = ИнформационнаяБаза.Атрибуты.ПолучитьИменованныйЭлемент("schema");
		Если АтрибутСхема <> Неопределено Тогда
			СхемаКонфигурации = АтрибутСхема.Значение;
		Иначе
			СхемаКонфигурации = Неопределено;
		КонецЕсли;
		ВерсияПриложения = ИнформационнаяБаза.РодительскийУзел.Атрибуты.ПолучитьИменованныйЭлемент("version").Значение;
		
		Если Найти(ИмяФайла, СтруктураПодключения.НаименованиеПриложения + "_" + ВерсияПриложения + "_informationBase_") <> 0 Тогда 
			ДатаНомер = СтрЗаменить(ИмяФайла, СтруктураПодключения.НаименованиеПриложения + "_" + ВерсияПриложения + "_informationBase_", "");
		ИначеЕсли Найти(ИмяФайла, СтруктураПодключения.НаименованиеПриложения + "_informationBase_") <> 0 Тогда 
			ДатаНомер = СтрЗаменить(ИмяФайла, СтруктураПодключения.НаименованиеПриложения + "_informationBase_", "");
		КонецЕсли;
		Представление = НСтр("ru='Копия от ';en='Backup of '") + ДатаНомер;
		
		НоваяСтрока = ВыгруженныеБазы.Вставить(0);
		НоваяСтрока.ИмяФайла = ИмяФайла;
		НоваяСтрока.Представление = Представление;
		НоваяСтрока.ВерсияПриложения = ВерсияПриложения;
		НоваяСтрока.СхемаКонфигурации = СхемаКонфигурации;
		
		ИнформационнаяБаза = РезультатXPath.ПолучитьСледующий();
	КонецЦикла;
	
	Результат.АдресВыгруженныеБазы = ПоместитьВоВременноеХранилище(ВыгруженныеБазы);
	Результат.СтрокаПодключения = СтруктураПодключения.СтрокаПодключения;
	
	Возврат Результат;
	
КонецФункции

// Конвертирует базу базу в XML.
&НаСервере
Функция ВыгрузитьБазуВXML() Экспорт
	
	ПутьФайлаВыгрузки = ПолучитьИмяВременногоФайла(".xml");
	
	ФайлВыгрузки = Новый ЗаписьXML;
	ФайлВыгрузки.ОткрытьФайл(ПутьФайлаВыгрузки);
	ФайлВыгрузки.ЗаписатьОбъявлениеXML();
	ФайлВыгрузки.ЗаписатьНачалоЭлемента("Документ");
	
	Для Каждого Элемент Из Константы Цикл
		//Если Элемент = Константы.Пароль
		//	ИЛИ Элемент = Константы.ЯндексДискПароль
		//	ИЛИ Элемент = Константы.КодДоступа Тогда
		//	Продолжить;
		//КонецЕсли;
		Константа = Элемент.СоздатьМенеджерЗначения();
		Константа.Прочитать();
		СериализаторXDTO.ЗаписатьXML(ФайлВыгрузки, Константа, НазначениеТипаXML.Явное);
	КонецЦикла;
	
	Для Каждого Элемент Из Метаданные.Справочники Цикл
		МенеджерСправочника = Справочники[Элемент.Имя];
		ВыборкаСправочника = МенеджерСправочника.Выбрать();
		
		Пока ВыборкаСправочника.Следующий() Цикл
			СериализаторXDTO.ЗаписатьXML(ФайлВыгрузки, ВыборкаСправочника.Ссылка.ПолучитьОбъект(), НазначениеТипаXML.Явное);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого Элемент Из Метаданные.РегистрыСведений Цикл
		НаборЗаписей = РегистрыСведений[Элемент.Имя].СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		СериализаторXDTO.ЗаписатьXML(ФайлВыгрузки, НаборЗаписей, НазначениеТипаXML.Явное);
	КонецЦикла;
	
	//Для Каждого Элемент Из Метаданные.РегистрыНакопления Цикл
	//	
	//	Менеджер = РегистрыНакопления[Элемент.имя];
	//	Выборка = менеджер.выбрать();
	//	
	//	НаборЗаписей = РегистрыНакопления[Элемент.Имя].СоздатьНаборЗаписей();
	//	
	//	Пока Выборка.Следующий() цикл 
	//		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
	//		НаборЗаписей.Прочитать();
	//		СериализаторXDTO.ЗаписатьXML(ФайлВыгрузки, НаборЗаписей, НазначениеТипаXML.Явное);
	//	КонецЦикла;
	//КонецЦикла;
	
	Для Каждого Элемент Из Метаданные.Документы Цикл
		МенеджерДокумента = Документы[Элемент.Имя];
		ВыборкаДокумента = МенеджерДокумента.Выбрать();
		
		Пока ВыборкаДокумента.Следующий() Цикл
			СериализаторXDTO.ЗаписатьXML(ФайлВыгрузки, ВыборкаДокумента.Ссылка.ПолучитьОбъект(), НазначениеТипаXML.Явное);
		КонецЦикла;
	КонецЦикла;
		
	ФайлВыгрузки.ЗаписатьКонецЭлемента();
	ФайлВыгрузки.Закрыть();
	
	Возврат ПутьФайлаВыгрузки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция УстановитьСтрокуПодключения()
	
	НаименованиеПриложения = "SmallBusiness";
	
	СтрокаПодключения = "https://%user%:%password%@webdav.yandex.ru/" + Константы.ЯндексДискРабочаяПапка.Получить();
	ЯндексДискЛогин = Константы.ЯндексДискЛогин.Получить();
	ЯндексДискЛогин = СтрЗаменить(ЯндексДискЛогин, "@yandex.ru", "");
	СтрокаПодключения = СтрЗаменить(СтрокаПодключения, "%user%", СокрЛП(ЯндексДискЛогин));
	ЯндексДискПароль = Константы.ЯндексДискПароль.Получить();
	СтрокаПодключения = СтрЗаменить(СтрокаПодключения, "%password%", КодироватьСтроку(ЯндексДискПароль, СпособКодированияСтроки.КодировкаURL));
	Если Прав(СтрокаПодключения, 1) <> "/" Тогда 
		СтрокаПодключения = СтрокаПодключения + "/";
	КонецЕсли;
	
	ФайлИнформацииОВыгрузках = СтрокаПодключения + "informationBases.xml";
	
	Возврат Новый Структура("СтрокаПодключения, ФайлИнформацииОВыгрузках, НаименованиеПриложения", СтрокаПодключения, ФайлИнформацииОВыгрузках, НаименованиеПриложения);
	
КонецФункции

&НаСервере
Функция ЭкспортXMLСхемыКонфигурации()
	
	ВыгружаемыеПакеты = Новый Массив;
	ВыгружаемыеПакеты.Добавить("http://v8.1c.ru/8.1/data/enterprise/current-config");
	СхемаКонфигурации = ПолучитьИмяВременногоФайла(".xsd");
	
	НаборСхем = ФабрикаXDTO.ЭкспортСхемыXML(ВыгружаемыеПакеты);
	Для Итератор = 0 по НаборСхем.Количество() - 1 Цикл
		Схема = НаборСхем.Получить(Итератор);
		Схема.ОбновитьЭлементDOM();
		ЗаписьDOM = Новый ЗаписьDOM;
		ЗаписьXMLСтрока = Новый ЗаписьXML;
		ЗаписьXMLСтрока.УстановитьСтроку();
		ЗаписьXMLФайл = Новый ЗаписьXML;
		ЗаписьDOM.Записать(Схема.ДокументDOM, ЗаписьXMLСтрока);
		ЗаписьXMLФайл.ОткрытьФайл(СхемаКонфигурации);
		ЗаписьXMLФайл.ЗаписатьБезОбработки(ЗаписьXMLСтрока.Закрыть());
		ЗаписьXMLФайл.Закрыть()
	КонецЦикла;
	
	Возврат СхемаКонфигурации;
	
КонецФункции

&НаСервере
Процедура ОчиститьБазу() Экспорт
	ВыборкаПланыОБмена = ПланыОбмена.МобильноеПриложение.Выбрать();
	Пока ВыборкаПланыОБмена.Следующий() Цикл
		Если Не ВыборкаПланыОБмена.ЭтотУзел Тогда
			ВыборкаПланыОбмена.ПолучитьОбъект().Удалить();
		КонецЕсли;
	КонецЦикла;
	
	Константы.АдресЦентральнойБазы.Установить("");
	Константы.ПользовательЦентральнойБазы.Установить("");
	Константы.Пароль.Установить("");
	Константы.ТекущийПроект.Установить(Неопределено);
	Константы.ТекущийКонтрагент.Установить(Неопределено);
	Константы.СоединениеСЦБУстановлено.Установить(Ложь);
	
	Для Каждого Элемент Из Метаданные.Справочники Цикл
		МенеджерСправочника = Справочники[Элемент.Имя];
		ВыборкаСправочника = МенеджерСправочника.Выбрать();
		
		Пока ВыборкаСправочника.Следующий() Цикл
			Справочник = ВыборкаСправочника.ПолучитьОбъект();
			Справочник.ОбменДанными.Загрузка = Истина;
			Справочник.Удалить();
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого Элемент Из Метаданные.РегистрыСведений Цикл
		НаборЗаписей = РегистрыСведений[Элемент.Имя].СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	КонецЦикла;
	
	Для Каждого Элемент Из Метаданные.Документы Цикл
		МенеджерДокумента = Документы[Элемент.Имя];
		ВыборкаДокумента = МенеджерДокумента.Выбрать();
		
		Пока ВыборкаДокумента.Следующий() Цикл
			Документ = ВыборкаДокумента.ПолучитьОбъект();
			Документ.ОбменДанными.Загрузка = Истина;
			Документ.Удалить();
		КонецЦикла;
	КонецЦикла;
			
КонецПроцедуры

#КонецОбласти