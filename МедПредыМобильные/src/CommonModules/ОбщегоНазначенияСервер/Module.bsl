////////////////////////////////////////////////////////////////////////////////
// МОДУЛЬ СОДЕРЖИТ ОБЩИЕ МЕТОДЫ РАБОТЫ С БД
// - установка параметров сеанса
// - установка шрифтов и размеров элементов форм
// - обработка запуска приложения
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Устанавливает параметры сеанса.
//
Процедура УстановитьПараметрыСеанса() Экспорт
	
	Смартфон	= Ложь;
	DPI			= 1;
	Высота		= 0;
	Ширина		= 0;
	Множитель	= 0;
	СисИнфо = Новый СистемнаяИнформация;
	ПараметрыСеанса.ВерсияОС = ?(Найти(СисИнфо.ВерсияОС, "pple") > 0, "iOS", "Linux");
	
	#Если МобильноеПриложениеСервер Тогда
		ИнформацияЭкрана = ПолучитьИнформациюЭкрановКлиента();
		Если ИнформацияЭкрана <> Неопределено Тогда
			DPI		= ИнформацияЭкрана[0].DPI;
			Высота	= ИнформацияЭкрана[0].Высота;
			Ширина	= ИнформацияЭкрана[0].Ширина;
			РазмерЭкрана = Sqrt((Высота/DPI*Высота/DPI)+(Ширина/DPI*Ширина/DPI));
			Если РазмерЭкрана < 8 Тогда
				Смартфон = Истина;
			КонецЕсли;
			Если Высота / Ширина > 1.5 Тогда
				Если ПараметрыСеанса.ВерсияОС = "iOS" Тогда
					Множитель = 8.5;
				Иначе
					Множитель = 9;
				КонецЕсли;
			Иначе
				Множитель = 10;
			КонецЕсли;
		Конецесли;
	#КонецЕсли
	
	ПараметрыСеанса.ШиринаЭкрана = Цел(Множитель * Высота / DPI);
	ПараметрыСеанса.ВысотаЭкрана = Окр(ПараметрыСеанса.ШиринаЭкрана * (?(Ширина = 0, 0, Высота/Ширина)));
	Если Смартфон Тогда
		ПараметрыСеанса.Смартфон = Истина;
		Если Константы.РазмерШрифтаИнтерфейсаДляСмартфона.Получить() = Перечисления.РазмерШрифтаИнтерфейсаДляСмартфона.Мелкий Тогда
			ПараметрыСеанса.РазмерШрифтаИнтерфейса = 10;
		Иначе
			ПараметрыСеанса.РазмерШрифтаИнтерфейса = 12;
		КонецЕсли;
	Иначе
		ПараметрыСеанса.Смартфон = Ложь;
		ПараметрыСеанса.РазмерШрифтаИнтерфейса = 10;
	КонецЕсли;
	
КонецПроцедуры // УстановитьПараметрыСеанса()

// Выполняет необходимые действия перед запуском приложения.
//
Процедура ОбработатьЗапускПриложения(Отказ, ПользовательСоздан) Экспорт
	
	ОбновитьПовторноИспользуемыеЗначения();
	ПредопределенныеВАнглийскуюЛокальЕслиНужно();
	ПользовательСоздан = СоздатьПользователя();
	
КонецПроцедуры // ОбработатьЗапускПриложения()

// Устанавливает заголовок формы.
//
Процедура УстановитьЗаголовокФормы(Форма, Заголовок, Род = "Мужской") Экспорт
	
	АвтоЗаголовок = Ложь;
	Если Форма.Объект.Ссылка.Пустая()
		И Род = "Мужской" Тогда
		Форма.Заголовок = Заголовок + НСтр("en=' (new)';ru=' (новый)'");
	ИначеЕсли Форма.Объект.Ссылка.Пустая()
		И Род = "Женский" Тогда
		Форма.Заголовок = Заголовок + НСтр("en=' (new)';ru=' (новая)'");
	ИначеЕсли Форма.Объект.ПометкаУдаления Тогда
		Форма.Заголовок = Заголовок + НСтр("en=' (removed)';ru=' (к удалению)'");
	Иначе
		Форма.Заголовок = Заголовок;
	КонецЕсли;
	
КонецПроцедуры // УстановитьЗаголовокФормы()

// Добавляет отбор в коллекцию отборов компоновщика или группы отборов.
//
// Параметры:
// ЭлементСтруктуры- элемент структуры КД;
// Поле			- имя поля, по которому добавляется отбор;
// Значение		- значение отбора КД;
// ВидСравнения	- вид сравнений КД (по умолчанию: неопределено);
// Использование	- признак использования отбора (по умолчанию: истина);
// ВПользовательскиеНастройки - признак добавления в пользовательсие настройки КД (по умолчанию: ложь).
//
// Возвращаемое значение:
// ЭлементОтбора (ЭлементОтбораКомпоновкиДанных).
//
Функция ДобавитьОтбор(ЭлементСтруктуры, Знач Поле, Значение, ВидСравнения = Неопределено,
	
	Использование = Истина, ВПользовательскиеНастройки = Ложь) Экспорт
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Настройки.Отбор;
		Если ВПользовательскиеНастройки Тогда
			Для Каждого ЭлементНастройки Из ЭлементСтруктуры.ПользовательскиеНастройки.Элементы Цикл
				Если ЭлементНастройки.ИдентификаторПользовательскойНастройки 
					= ЭлементСтруктуры.Настройки.Отбор.ИдентификаторПользовательскойНастройки Тогда
					Отбор = ЭлементНастройки;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Отбор;
	Иначе
		Отбор = ЭлементСтруктуры;
	КонецЕсли;
	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	ЭлементОтбора = Неопределено;
	ЭлементОтбора = НайтиЭлементОтбора(Отбор, Поле);
	Если ЭлементОтбора = Неопределено Тогда
		ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	КонецЕсли;
	ЭлементОтбора.Использование	 = Использование;
	ЭлементОтбора.ЛевоеЗначение	 = Поле;
	ЭлементОтбора.ВидСравнения	 = ВидСравнения;
	ЭлементОтбора.ПравоеЗначение = Значение;
	Возврат ЭлементОтбора;
	
КонецФункции // ДобавитьОтбор()

// Находит элемент отбора.
//
Функция НайтиЭлементОтбора(Отбор, Поле)
	
	ЭлементОтбора = Неопределено;
	Для каждого Элемент Из Отбор.Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ЭлементОтбора = НайтиЭлементОтбора(Элемент, Поле);
			Продолжить;
		КонецЕсли;
		Если Элемент.ЛевоеЗначение = Поле Тогда
			ЭлементОтбора = Элемент;
		КонецЕсли;
	КонецЦикла;
	Возврат ЭлементОтбора;
	
КонецФункции

// Помечает на удаление или удаляет объекты справочников информационной базы.
//
// Параметры:
// МассивПомечаемыхСправочников - Массив - массив имен справочников;
// Удалить - Булево - флаг непосредственного удаления объектов.
//
Процедура ПометитьНаУдалениеСправочники(Знач МассивПомечаемыхСправочников, Знач Удалить = Ложь) Экспорт
	
	Для каждого ИмяСправочника Из МассивПомечаемыхСправочников Цикл
		ВыборкаСправочника = Справочники[ИмяСправочника].Выбрать();
		Пока ВыборкаСправочника.Следующий() Цикл
			Если ВыборкаСправочника.Предопределенный Тогда
				Продолжить;
			КонецЕсли;
			Объект = ВыборкаСправочника.ПолучитьОбъект();
			Объект.ОбменДанными.Загрузка = Истина;
			Если Удалить Тогда
				Объект.Удалить();
			Иначе
				Объект.ПометкаУдаления = Истина;
				Объект.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ПометитьНаУдалениеСправочники()

// Очищает все записи регистра сведений.
// Параметры:
// МассивОчищаемыхРегистров - Массив - массив имен регистров.
Процедура ОчиститьРегистрыСведений(Знач МассивОчищаемыхРегистров) Экспорт
	
	Для каждого ИмяРегистра Из МассивОчищаемыхРегистров Цикл
		НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры // ОчиститьРегистрыСведений()

// Очищает все записи регистра накопления.
// Параметры:
// МассивОчищаемыхРегистров - Массив - массив имен регистров.
Процедура ОчиститьРегистрыНакопления(Знач МассивОчищаемыхРегистров) Экспорт
	
	Для каждого ИмяРегистра Из МассивОчищаемыхРегистров Цикл
		Менеджер = РегистрыНакопления[ИмяРегистра];
		Выборка = Менеджер.Выбрать();
		НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
		Пока Выборка.Следующий() цикл 
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ОчиститьРегистрыНакопления()

// Помечает на удаление или удаляет документы информационной базы.
//
// Параметры:
// МассивПомечаемыхДокументов - Массив - массив имен документов;
// ДатаНач - Дата - дата начала выборки длокументов;
// ДатаКон - Дата - дата окончания выборки документов;
// Удалить - Булево - флаг непосредственного удаления объектов.
//
Процедура ПометитьНаУдалениеДокументы(Знач МассивПомечаемыхДокументов,
	
	ДатаНач = Неопределено,  ДатаКон = Неопределено, Знач Удалить = Ложь) Экспорт
	
	Для каждого ИмяДокумента Из МассивПомечаемыхДокументов Цикл
		ВыборкаДокумента = Документы[ИмяДокумента].Выбрать(ДатаНач, ДатаКон);
		Пока ВыборкаДокумента.Следующий() Цикл
			Объект = ВыборкаДокумента.ПолучитьОбъект();
			Объект.ОбменДанными.Загрузка = Истина;
			Если Не Удалить Тогда
				Объект.ПометкаУдаления = Истина;
				РежимЗаписи = ?(Объект.Проведен, РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись);
				Объект.ДополнительныеСвойства.Вставить("ЗапретитьОперацииСоСвязанымиДокументами", Истина);
				Объект.ДополнительныеСвойства.Вставить("ЗапретитьПовторныйЗапускОбмена", Истина);
				Объект.Записать(РежимЗаписи);
			Иначе
				Объект.Удалить();
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ПометитьНаУдалениеДокументы()

// Получает связанные документы.
//
Функция ПолучитьСвязанныеДокументы(ИмяДокумента, Ссылка)
	
	СтруктураОтбора = Новый Структура("Основание", Ссылка);
	СвязанныеДокументы = Документы[ИмяДокумента].Выбрать(,,СтруктураОтбора);
	
	Возврат СвязанныеДокументы;
	
КонецФункции // ПолучитьСвязанныеДокументы()

// Удаляет связные документы.
//
Процедура УдалитьСвязанныеДокументы(ИмяДокумента, Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	СвязанныеДокументы = ПолучитьСвязанныеДокументы(ИмяДокумента, Ссылка);
	Пока СвязанныеДокументы.Следующий() Цикл
		ДокументОбъект = СвязанныеДокументы.ПолучитьОбъект();
		ДокументОбъект.Удалить();
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // УдалитьСвязанныеДокументы()

// Получает номенклатуру по переданному штрихкоду.
//
Функция ПолучитьноменклатуруПоШтрихкоду(Штрихкод) Экспорт
	
	Возврат Справочники.Товары.НайтиПоРеквизиту("Штрихкод", Штрихкод);
	
КонецФункции // ПолучитьноменклатуруПоШтрихкоду()

// Процедура удаляет проверяемый реквизит из массива проверяемых реквизитов.
Процедура УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, ПроверяемыйРеквизит) Экспорт
	
	НайденныйРеквизит = ПроверяемыеРеквизиты.Найти(ПроверяемыйРеквизит);
	Если ЗначениеЗаполнено(НайденныйРеквизит) Тогда
		ПроверяемыеРеквизиты.Удалить(НайденныйРеквизит);
	КонецЕсли;
	
КонецПроцедуры // УдалитьПроверяемыйРеквизит()

// Возвращает текущую ориентацию экрана.
//
Функция ПолучитьОриентациюЭкрана() Экспорт
	
	Ориентация = ОриентацияСтраницы.Ландшафт;
	
	#Если МобильноеПриложениеСервер Тогда 
	ИнформацияЭкрана = ПолучитьИнформациюЭкрановКлиента();
	Если ИнформацияЭкрана <> Неопределено Тогда
		Высота = ИнформацияЭкрана[0].Высота;
		Ширина = ИнформацияЭкрана[0].Ширина;
		Если Ширина < Высота Тогда
			Ориентация = ОриентацияСтраницы.Портрет;
		КонецЕсли;
	КонецЕсли;
	#КонецЕсли
	
	Возврат Ориентация;
	
КонецФункции // ПолучитьОриентациюЭкрана()

// Преобразует текст формата XML в таблицу значений,
// при этом колонки таблицы формируются на основе описания в XML.
//
// Параметры:
//  XML     - текст в формате XML или ЧтениеXML.
//
// Схема XML:
// <?xml version="1.0" encoding="utf-8"?>
//  <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
//   <xs:element name="Items">
//    <xs:complexType>
//     <xs:sequence>
//      <xs:element maxOccurs="unbounded" name="Item">
//       <xs:complexType>
//        <xs:attribute name="Code" type="xs:integer" use="required" />
//        <xs:attribute name="Name" type="xs:string" use="required" />
//        <xs:attribute name="Socr" type="xs:string" use="required" />
//        <xs:attribute name="Index" type="xs:string" use="required" />
//       </xs:complexType>
//      </xs:element>
//     </xs:sequence>
//    <xs:attribute name="Description" type="xs:string" use="required" />
//    <xs:attribute name="Columns" type="xs:string" use="required" />
//   </xs:complexType>
//  </xs:element>
// </xs:schema>
//
// Примеры XML-файлов см. в демонстрационной конфигурации.
// 
// Пример использования:
//   КлассификаторТаблица = ПрочитатьXMLВТаблицу(
//     Справочники.Валюты.ПолучитьМакет("ОбщероссийскийКлассификаторВалют").ПолучитьТекст()).Данные;
//
// Возвращаемое значение:
//  Структура - с полями 
//    * ИмяТаблицы - Строка
//    * Данные - ТаблицаЗначений.
//
Функция ПрочитатьXMLВТаблицу(Знач XML) Экспорт
	
	Если ТипЗнч(XML) <> Тип("ЧтениеXML") Тогда
		Чтение = Новый ЧтениеXML;
		Чтение.УстановитьСтроку(XML);
	Иначе
		Чтение = XML;
	КонецЕсли;
	
	// Прочитаем первый узел и проверим его.
	Если Не Чтение.Прочитать() Тогда
		ВызватьИсключение НСтр("ru = 'Пустой XML'");
	ИначеЕсли Чтение.Имя <> "Items" Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка в структуре XML'");
	КонецЕсли;
	
	// Получим описание таблицы и создадим ее.
	ИмяТаблицы = Чтение.ПолучитьАтрибут("Description");
	ИменаКолонок = СтрЗаменить(Чтение.ПолучитьАтрибут("Columns"), ",", Символы.ПС);
	Колонок = СтрЧислоСтрок(ИменаКолонок);
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	Для Сч = 1 По Колонок Цикл
		ТаблицаЗначений.Колонки.Добавить(СтрПолучитьСтроку(ИменаКолонок, Сч), Новый ОписаниеТипов("Строка"));
	КонецЦикла;
	
	// Заполним значения в таблице.
	Пока Чтение.Прочитать() Цикл
		
		Если Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента И Чтение.Имя = "Items" Тогда
			Прервать;
		ИначеЕсли Чтение.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
			Продолжить;
		ИначеЕсли Чтение.Имя <> "Item" Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка в структуре XML'");
		КонецЕсли;
		
		новСтр = ТаблицаЗначений.Добавить();
		Для Сч = 1 По Колонок Цикл
			ИмяКолонки = СтрПолучитьСтроку(ИменаКолонок, Сч);
			новСтр[Сч-1] = Чтение.ПолучитьАтрибут(ИмяКолонки);
		КонецЦикла;
		
	КонецЦикла;
	
	// Заполним результат
	Результат = Новый Структура;
	Результат.Вставить("ИмяТаблицы", ИмяТаблицы);
	Результат.Вставить("Данные", ТаблицаЗначений);
	
	Возврат Результат;
	
КонецФункции

// Возаращает наличие предопределенного элемента в даннвх.
//
Функция ЕстьПредопределенныйВДанных(ОбъектКонфигурации, ИмяПредопределенныхДанных) Экспорт
	
	Запрос = Новый Запрос;
	Текст = 
	"ВЫБРАТЬ
	|	ОбъектКонфигурации.Ссылка
	|ИЗ
	|	Справочник.%ОбъектКонфигурации% КАК ОбъектКонфигурации
	|ГДЕ
	|	ОбъектКонфигурации.ИмяПредопределенныхДанных = &ИмяПредопределенныхДанных";
	
	Текст = СтрЗаменить(Текст, "%ОбъектКонфигурации%", ОбъектКонфигурации);
	Запрос.Текст = Текст;
	Запрос.УстановитьПараметр("ИмяПредопределенныхДанных", ИмяПредопределенныхДанных);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции // ЕстьПредопределенныйВДанных()

// Получает структуру записи календаря.
//
Функция ПолучитьСтруктуруЗаписиКалендаря(Ссылка) Экспорт
	
	Идентификатор = Новый УникальныйИдентификатор(Ссылка);
	Ссылка = Справочники.ЗаписиКалендаряПодготовкиОтчетности.ПолучитьСсылку(Идентификатор);
	СтруктураСобытия = Новый Структура("СобытиеКалендаря, СостояниеСобытия, Организация",
		Ссылка.СобытиеКалендаря,
		Ссылка.Состояние,
		Ссылка.Организация);
	Возврат СтруктураСобытия;

КонецФункции

// Возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
//  Если доступа к реквизиту нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
//
// Функция не предназначена для получения значений реквизитов пустых ссылок.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита - Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Результат = ЗначенияРеквизитовОбъекта(Ссылка, ИмяРеквизита);
	Возврат Результат[СтрЗаменить(ИмяРеквизита, ".", "")];
	
КонецФункции

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Функция не предназначена для получения значений реквизитов пустых ссылок.
//
// Параметры:
//  Ссылка    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
//
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
//              требований к свойствам структуры.
//              Например, "Код, Наименование, Родитель".
//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//              псевдоним поля для возвращаемой структуры с результатом, а в качестве
//              значения (опционально) фактическое имя поля в таблице.
//              Если значение не определено, то имя поля берется из ключа.
//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//              к свойствам структуры.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
//              Если строка затребованных реквизитов пуста, то возвращается пустая структура.
//              Если в качестве объекта передана пустая ссылка, то все реквизиты вернутся со значением Неопределено.
//
Функция ЗначенияРеквизитовОбъекта(Ссылка, Знач Реквизиты) Экспорт
	
	Если ТипЗнч(Реквизиты) = Тип("Строка") Тогда
		Если ПустаяСтрока(Реквизиты) Тогда
			Возврат Новый Структура;
		КонецЕсли;
		Реквизиты = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуВМассивПодстрок(Реквизиты,,,Истина);
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура;
	Если ТипЗнч(Реквизиты) = Тип("Структура") Или ТипЗнч(Реквизиты) = Тип("ФиксированнаяСтруктура") Тогда
		СтруктураРеквизитов = Реквизиты;
	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Массив") Или ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда
		Для Каждого Реквизит Из Реквизиты Цикл
			СтруктураРеквизитов.Вставить(СтрЗаменить(Реквизит, ".", ""), Реквизит);
		КонецЦикла;
	Иначе
		ВызватьИсключение НСтр("ru = 'Неверный тип второго параметра'");
	КонецЕсли;
	
	ТекстПолей = "";
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Ключ));
		
		Псевдоним = СокрЛП(КлючИЗначение.Ключ);
		
		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
		|	" + ИмяПоля + " КАК " + Псевдоним;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|" + ТекстПолей + "
	|ИЗ
	|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
	|ГДЕ
	|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Результат.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПредопределенныеВАнглийскуюЛокальЕслиНужно()
	
	УстановитьПривилегированныйРежим(Истина);
	Если НСтр("ru='ru';en='en'") = "en" Тогда
	Иначе
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры // ПредопределенныеВАнглийскуюЛокальЕслиНужно()

Функция СоздатьПользователя()
	
	ПользовательСоздан = Ложь;
	УстановитьПривилегированныйРежим(Истина);
	Пользователи = ПользователиИнформационнойБазы.ПолучитьПользователей();
	Если Пользователи.Количество() = 0 Тогда
		НовыйПользователь = ПользователиИнформационнойБазы.СоздатьПользователя();
		НовыйПользователь.Имя = "Пользователь";
		НовыйПользователь.Роли.Очистить();
		НовыйПользователь.Роли.Добавить(Метаданные.Роли.ПолныеПрава);
		НовыйПользователь.Записать();
		#Если НЕ МобильноеПриложениеСервер Тогда
			НовыйПользователь = ПользователиИнформационнойБазы.СоздатьПользователя();
			НовыйПользователь.Имя = "Администратор";
			НовыйПользователь.Роли.Очистить();
			НовыйПользователь.Роли.Добавить(Метаданные.Роли.ПолныеПрава);
			НовыйПользователь.Записать();
		#КонецЕсли
		ПользовательСоздан = Истина;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ПользовательСоздан;
	
КонецФункции // СоздатьПользователя()

// Определяет принадлежность объекта метаданных к общему типу "Документ".
//
// Параметры:
//  ОбъектМетаданных - ОбъектМетаданных - объект, для которого необходимо определить принадлежность к документам.
// 
// Возвращаемое значение:
//   Булево - Истина, если объект является документом.
//
Функция ЭтоДокумент(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.Документы.Содержит(ОбъектМетаданных);
	
КонецФункции

#КонецОбласти