#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ТАБЛИЧНЫМИ ЧАСТЯМИ

// Формирует текст периода отчета.
//
Процедура СформироватьТекстПериодОтчета(Форма) Экспорт
	
	Форма.Элементы.ОчиститьПериод.Видимость = Истина;
	Если ЗначениеЗаполнено(Форма.НачалоПериода)
		И ЗначениеЗаполнено(Форма.КонецПериода) Тогда
		Форма.ПериодОтчета = "с " + Строка(Формат(Форма.НачалоПериода, "ДФ=dd.MM.yy")) + " - по " + Строка(Формат(Форма.КонецПериода, "ДФ=dd.MM.yy"));
	ИначеЕсли ЗначениеЗаполнено(Форма.НачалоПериода) Тогда
		Форма.ПериодОтчета = "с " + Строка(Формат(Форма.НачалоПериода, "ДФ=dd.MM.yy"));
	ИначеЕсли ЗначениеЗаполнено(Форма.КонецПериода) Тогда
		Форма.ПериодОтчета = "по " + Строка(Формат(Форма.КонецПериода, "ДФ=dd.MM.yy"));
	Иначе
		Форма.ПериодОтчета = НСтр("ru='<за все время>';en='<all time>'");
		Форма.Элементы.ОчиститьПериод.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Сканирует штрихкод.
//
Процедура ОтсканироватьШтрихкод(ОбработчикСканирования, Форма) Экспорт
	
	#Если МобильноеПриложениеКлиент Тогда
		Если СредстваМультимедиа.ПоддерживаетсяСканированиеШтрихКодов() Тогда
			СредстваМультимедиа.ПоказатьСканированиеШтрихКодов(НСтр("ru='Отсканируйте штрихкод';en='Scan Barcode'"), ОбработчикСканирования);
		Иначе
			Предупреждение(НСтр("ru='На этом устройстве сканирование штрихкодов не поддерживаются.';en='In this barcode scanning device is not supported.'"));
		КонецЕсли;
	#Иначе
		Штрихкод = "";
		Если ВвестиСтроку(Штрихкод, НСтр("en='Enter Barcode';ru='Введите штрихкод'"), 200) Тогда
			Форма.ПолученШтрихкод(Штрихкод);
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

// Отправляет сообщение по электронной почте.
//
Процедура ОтправитьПоПочте(Письмо) Экспорт
	
	ТемаПисьма = Письмо.ТемаПисьма;
	ТемаПисьма = ОбщегоНазначенияВызовСервера.Кодировать(ТемаПисьма);
	ТелоПисьма = Письмо.ТелоПисьма;
	ТелоПисьма = ОбщегоНазначенияВызовСервера.Кодировать(ТелоПисьма);
	СтрокаКоманды = "mailto:";
	СтрокаКоманды = СтрокаКоманды + Письмо.Получатель + "?";
	СтрокаКоманды = СтрокаКоманды + "subject=" + ТемаПисьма + "&";
	СтрокаКоманды = СтрокаКоманды + "body=" + ТелоПисьма;
	ЗапуститьПриложение(СтрокаКоманды);
	
КонецПроцедуры

// Отправляет сообщение по СМС.
//
Процедура ОтправитьПоСМС(Письмо) Экспорт
	
	СтрокаКоманды = "sms:";
	СтрокаКоманды = СтрокаКоманды + СокрЛП(Письмо.Получатель);
	СтрокаКоманды = СтрокаКоманды + "?body=" + ОбщегоНазначенияВызовСервера.Кодировать(Письмо.ТелоПисьма);
	ЗапуститьПриложение(СтрокаКоманды);
	
КонецПроцедуры

// Отправляет любое вложение.
//
Процедура ОтправитьВложениеАндроид(
	Получатель = "",
	Тема = "",
	ТекстСообщения = "",
	АдресВложения = Неопределено) Экспорт
	
	#Если МобильноеПриложениеКлиент Тогда
		Запуск = Новый ЗапускПриложенияМобильногоУстройства();
		Запуск.Действие = "android.intent.action.SEND";
		Запуск.ДополнительныеДанные.Добавить("android.intent.extra.STREAM", "file://" + АдресВложения, "Uri");
		Запуск.ДополнительныеДанные.Добавить("android.intent.extra.SUBJECT", Тема);
		Запуск.ДополнительныеДанные.Добавить("android.intent.extra.TEXT", ТекстСообщения);
		Запуск.Данные = Получатель;
		Запуск.Тип = "text/html";
		Запуск.Запустить(Ложь);
	#КонецЕсли
	
КонецПроцедуры

// Отправляет письмо.
//
Процедура ПослатьПисьмо(
	Получатель = "",
	Тема = "",
	ТекстСообщения = "",
	АдресВложения = Неопределено,
	НаименованиеВложения = Неопределено) Экспорт
	
	#Если МобильноеПриложениеКлиент Тогда
		Если СредстваПочты.ПоддерживаетсяОтправка() Тогда
			Письмо = Новый ИнтернетПочтовоеСообщение;
			Письмо.Получатели.Добавить(Получатель);
			Письмо.Тема = Тема;
			Письмо.Тексты.Добавить(ТекстСообщения);
			Если АдресВложения <> Неопределено Тогда
				Письмо.Вложения.Добавить(АдресВложения, НаименованиеВложения);
			КонецЕсли;
			СредстваПочты.Послать(Письмо);
		Иначе
			Предупреждение("На этом устройстве отправка почты не поддерживается.");
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

// Конвертирует табличнй документ в CSV.
//
Функция СконвертироватьВCSV(ТабДокумент, Разделитель) Экспорт
	
	СтрокаCSV = "";
	Для R = 1 По ТабДокумент.ВысотаТаблицы Цикл
		Для C = 1 По ТабДокумент.ШиринаТаблицы Цикл
			Область = ТабДокумент.Область("R" + R + "C" + C);
			СтрокаCSV = СтрокаCSV + СтрЗаменить(Область.Текст, Разделитель, ".") + Разделитель;
		КонецЦикла;
		СтрокаCSV = СтрокаCSV + Символы.ПС;
	КонецЦикла;
	
	Возврат СтрокаCSV;
	
КонецФункции

// Отправляет отчет в CSV.
//
Процедура ОтправитьОтчетВCSV(ТемаПисьма, ТабДокумент) Экспорт
	
	СоздатьКаталог(КаталогДокументов() + "TempSBM");
	АдресФайла = КаталогДокументов()+"TempSBM/" + "report.csv";
	
	ТекстОтчетаCSV = ОбщегоНазначенияКлиент.СконвертироватьВCSV(ТабДокумент, ПолучитьРазделительCSV());
	ЗаписьТекста = Новый ЗаписьТекста(АдресФайла, КодировкаТекста.UTF8);
	ЗаписьТекста.Записать(ТекстОтчетаCSV);
	ЗаписьТекста.Закрыть();
	
	#Если МобильноеПриложениеКлиент Тогда
		ТекстПисьма = "Во вложении - "
		+ ТемаПисьма
		+ Символы.ПС
		+ Символы.ПС 
		+ НСтр("ru='---
		|Сформировано в мобильном приложении 1С:Управление нашей фирмой';en='---
		|Created in a mobile application 1C:Small Business Mobile'");
		Если ОбщегоНазначенияВызовСервера.ВерсияОС() = "iOS" Тогда
			ПослатьПисьмо(, ТемаПисьма, ТекстПисьма, АдресФайла, ТемаПисьма);
		Иначе
			ОтправитьВложениеАндроид(, ТемаПисьма, ТекстПисьма, АдресФайла);
		КонецЕсли;
	#Иначе
		ЗапуститьПриложение(АдресФайла);
	#КонецЕсли
	
КонецПроцедуры

// Получает идентификатор подписчика.
//
&НаКлиенте
Функция ПолучитьИдентификаторПодписчика() Экспорт
	
	ИДПодписчикаУведомлений = "";
	
	#Если МобильноеПриложениеКлиент Тогда
	//! PUSH-уведомления пока не работают и не будут
	//Попытка
	//	Если ОбщегоНазначенияВызовСервера.ВерсияОС() <> "iOS" Тогда
	//		ИДПодписчикаУведомлений = ДоставляемыеУведомления.ПолучитьИдентификаторПодписчикаУведомлений("712386480696"); // Google
	//	КонецЕсли;
	//	ОбщегоНазначенияВызовСервера.УстановитьЗначениеИДПодписчикаУведомлений(ИДПодписчикаУведомлений);
	//	ДоставляемыеУведомления.ОтключитьОбработчикУведомлений(Новый ОписаниеОповещения("Подключаемый_ОбработчикУведомлений", ОбщегоНазначенияКлиент));
	//	ДоставляемыеУведомления.ПодключитьОбработчикУведомлений(Новый ОписаниеОповещения("Подключаемый_ОбработчикУведомлений", ОбщегоНазначенияКлиент)); // Для получения PUSH-уведомлений
	//Исключение
	//КонецПопытки;
	
	#КонецЕсли
	Возврат ИДПодписчикаУведомлений;
	
КонецФункции

// Обработчик получения пуш уведомлений.
//
&НаКлиенте
Процедура Подключаемый_ОбработчикУведомлений(Уведомление, Локальное, Показано, ДопПараметры = Неопределено) Экспорт
	
	Если Уведомление.Текст = "Звонок контрагенту" Тогда
		#Если МобильноеПриложениеКлиент Тогда
		СредстваТелефонии.НабратьНомер(СокрЛП(Уведомление.Данные),Истина);
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получет тип разделителя CSV/
//
Функция ПолучитьРазделительCSV()
	
	Разделитель = НСтр("ru=';';en=','");
	
	Если ОбщегоНазначенияВызовСервера.ПолучитьЗначениеКонстанты("ВариантРазделителяCSV") = ПредопределенноеЗначение("Перечисление.ВариантыРазделителейCSV.Запятая") Тогда
		Разделитель = ",";
	ИначеЕсли ОбщегоНазначенияВызовСервера.ПолучитьЗначениеКонстанты("ВариантРазделителяCSV") = ПредопределенноеЗначение("Перечисление.ВариантыРазделителейCSV.ТочкаСЗапятой") Тогда
		Разделитель = ";";
	КонецЕсли;
	
	Возврат Разделитель;
	
КонецФункции

#КонецОбласти